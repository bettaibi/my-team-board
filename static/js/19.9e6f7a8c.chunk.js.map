{"version":3,"sources":["hooks/useSidenav/index.tsx","../node_modules/@material-ui/lab/esm/AvatarGroup/AvatarGroup.js","pages/Team/Board/NewProject/index.tsx","pages/Team/Board/index.tsx"],"names":["useStyles","makeStyles","theme","drawerOpen","breakpoints","down","width","drawerClose","useSidenav","anchor","variant","state","classes","useToggle","onSidenavClose","handleClose","onSidenavOpen","handleOpen","show","onSidenavToggle","toggle","SidenavComponent","children","transitionDuration","enter","exit","open","onClose","className","clsx","paper","overflow","SPACINGS","small","medium","AvatarGroup","React","props","ref","childrenProp","_props$max","max","_props$spacing","spacing","other","_objectWithoutProperties","clampedMax","toArray","filter","child","extraAvatars","length","marginLeft","undefined","_extends","root","slice","map","index","avatar","style","zIndex","Avatar","withStyles","display","border","concat","palette","background","default","name","InitialValue","title","description","members","schema","yup","shape","required","NewProject","selectedMembers","useSelector","useSharedContext","dispatch","selectedWorkspace","useMutation","loading","onMutate","values","resetForm","a","payload","workspace","url","method","data","res","success","setTimeout","newProject","console","error","initialValues","validationSchema","onSubmit","submitHandler","handleSubmit","handleChange","handleBlur","errors","touched","autoComplete","Box","backgroundColor","padding","borderBottom","flexDirection","justifyContent","alignItems","RoundedButton","onClick","color","size","type","disableElevation","Typography","gutterBottom","MyTextField","fullWidth","placeholder","onChange","onBlur","value","helperText","multiline","rows","Autocomplete","e","newValue","newValues","item","_id","multiple","limitTags","clearOnBlur","id","options","getOptionLabel","option","defaultValue","renderTags","getTagProps","Chip","label","alt","src","process","userAvatar","renderInput","params","useStyle","mb","marginBottom","gridContainer","maxWidth","cursor","borderRadius","separator","height","margin","NewProjectDialog","disabled","owner","currentUser","Fragment","WithTooltip","text","overflowY","marginTop","Board","projects","history","useHistory","minHeight","align","Grid","container","xs","sm","md","lg","push","Paper","elevation","component","substr","Divider","member","Tooltip","fromNow","createdAt","mt"],"mappings":"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","file":"static/js/19.9e6f7a8c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\nimport useToggle from '../useToggle';\r\nimport { Box } from '@material-ui/core';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\n\r\ntype Anchors = 'left' | 'right' | 'top' | 'bottom';\r\ntype Variant = 'temporary' | 'permanent' | 'persistent';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n\r\n    drawerOpen: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            width: '100%'\r\n        },\r\n        width: '40%',\r\n    },\r\n    drawerClose: {\r\n        width: 0,\r\n    },\r\n}));\r\n\r\nconst useSidenav = (anchor: Anchors, variant: Variant, state?: boolean) => {\r\n    const classes = useStyles();\r\n    const { handleClose: onSidenavClose, handleOpen: onSidenavOpen, show, toggle: onSidenavToggle } = useToggle(state || false);\r\n\r\n    const SidenavComponent: React.FC = ({ children }) => {\r\n\r\n        return (\r\n            <Drawer\r\n            transitionDuration={{ enter: 500, exit: 1000 }}\r\n                variant={variant}\r\n                anchor={anchor}\r\n                open={show}\r\n                onClose={onSidenavClose}\r\n                className={clsx({\r\n                    [classes.drawerOpen]: show,\r\n                    [classes.drawerClose]: !show,\r\n                  })}\r\n                classes={{\r\n                    paper: clsx({\r\n                      [classes.drawerOpen]: show,\r\n                      [classes.drawerClose]: !show,\r\n                    }),\r\n                  }} >\r\n                <Box overflow=\"hidden\">\r\n                    {children}\r\n                </Box>\r\n            </Drawer>\r\n        )\r\n    };\r\n\r\n    return {\r\n        onSidenavClose,\r\n        onSidenavOpen,\r\n        onSidenavToggle,\r\n        SidenavComponent,\r\n        show\r\n    };\r\n\r\n};\r\n\r\nexport default useSidenav;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { isFragment } from 'react-is';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport { chainPropTypes } from '@material-ui/utils';\nvar SPACINGS = {\n  small: -16,\n  medium: null\n};\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'flex'\n    },\n\n    /* Styles applied to the avatar elements. */\n    avatar: {\n      border: \"2px solid \".concat(theme.palette.background.default),\n      marginLeft: -8,\n      '&:first-child': {\n        marginLeft: 0\n      }\n    }\n  };\n};\nvar AvatarGroup = /*#__PURE__*/React.forwardRef(function AvatarGroup(props, ref) {\n  var childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$max = props.max,\n      max = _props$max === void 0 ? 5 : _props$max,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? 'medium' : _props$spacing,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"max\", \"spacing\"]);\n\n  var clampedMax = max < 2 ? 2 : max;\n  var children = React.Children.toArray(childrenProp).filter(function (child) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The AvatarGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return /*#__PURE__*/React.isValidElement(child);\n  });\n  var extraAvatars = children.length > clampedMax ? children.length - clampedMax + 1 : 0;\n  var marginLeft = spacing && SPACINGS[spacing] !== undefined ? SPACINGS[spacing] : -spacing;\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), children.slice(0, children.length - extraAvatars).map(function (child, index) {\n    return /*#__PURE__*/React.cloneElement(child, {\n      className: clsx(child.props.className, classes.avatar),\n      style: _extends({\n        zIndex: children.length - index,\n        marginLeft: index === 0 ? undefined : marginLeft\n      }, child.props.style)\n    });\n  }), extraAvatars ? /*#__PURE__*/React.createElement(Avatar, {\n    className: classes.avatar,\n    style: {\n      zIndex: 0,\n      marginLeft: marginLeft\n    }\n  }, \"+\", extraAvatars) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? AvatarGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The avatars to stack.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Max avatars to show before +x.\n   */\n  max: chainPropTypes(PropTypes.number, function (props) {\n    if (props.max < 2) {\n      throw new Error(['Material-UI: The prop `max` should be equal to 2 or above.', 'A value below is clamped to 2.'].join('\\n'));\n    }\n  }),\n\n  /**\n   * Spacing between avatars.\n   */\n  spacing: PropTypes.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.number])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatarGroup'\n})(AvatarGroup);","import React from 'react';\r\nimport { Formik, Form } from \"formik\";\r\nimport {\r\n    Typography,\r\n    Box,\r\n    Avatar,\r\n    Chip\r\n} from '@material-ui/core';\r\nimport * as yup from \"yup\";\r\nimport MyTextField from '../../../../components/MyTextField';\r\nimport RoundedButton from '../../../../components/RoundedButton';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { AppState, ProjectModel, UserModel } from '../../../../models/app.model';\r\nimport { useSelector } from 'react-redux';\r\nimport { useSharedContext } from '../../../../context';\r\nimport { newProject } from '../../../../store/actions/project.actions';\r\nimport useMutation from '../../../../hooks/useMutation';\r\nimport userAvatar from '../../../../assets/avatars/profile.jpg';\r\n\r\nconst baseURL = process.env.REACT_APP_BASE_URL;\r\n\r\nconst InitialValue = {\r\n    title: '',\r\n    description: '',\r\n    members: [],\r\n};\r\n\r\nconst schema = yup.object().shape({\r\n    title: yup.string().required('Title is required'),\r\n    description: yup.string().required('Description is required')\r\n});\r\n\r\nlet members: string[] = [];\r\n\r\ninterface NewProjectProps {\r\n    onSidenavClose: () => void;\r\n}\r\n\r\nconst NewProject: React.FC<NewProjectProps> = ({ onSidenavClose }) => {\r\n    const selectedMembers = useSelector((state: AppState) => state.members);\r\n    const { dispatch, selectedWorkspace } = useSharedContext();\r\n    const { loading, onMutate } = useMutation();\r\n\r\n    function onEmailSelected(newValues: UserModel[]){\r\n        if(newValues !== null){\r\n            if(newValues.length === 0){\r\n                members = [];\r\n            }\r\n            else{\r\n                members = [...newValues.map((item: UserModel) => item._id || '')];\r\n            }\r\n        }\r\n    }\r\n\r\n    async function submitHandler (values: ProjectModel, resetForm: () => void){\r\n        try{\r\n            const payload: ProjectModel = {\r\n                ...values,\r\n                members: members,\r\n                workspace: selectedWorkspace || ''\r\n            };\r\n            const res = await onMutate({\r\n                url: '/projects',\r\n                method: 'POST',\r\n                data: payload\r\n            })\r\n            if(res.success){\r\n                onSidenavClose();\r\n                setTimeout(() =>{\r\n                    dispatch(newProject(res.data));\r\n                },0)\r\n            }\r\n        }\r\n        catch(err){\r\n            console.error(err)\r\n        }\r\n    }\r\n    return (\r\n        <Formik initialValues={InitialValue} validationSchema={schema} onSubmit={(values, { resetForm }) => submitHandler(values, resetForm)}>\r\n            {\r\n                ({ handleSubmit, handleChange, handleBlur, values, errors, touched }) => (\r\n                    <Form onSubmit={handleSubmit} autoComplete=\"off\" >\r\n                        <Box style={{ backgroundColor: '#f1f5f9', padding: '2.5rem 1rem' }} borderBottom=\"1px solid #fafafa\"\r\n                            display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\r\n\r\n                            <div></div>\r\n                            <Box>\r\n                                <RoundedButton className=\"bg-text-secondary\" onClick={onSidenavClose} variant=\"outlined\" color=\"default\" size=\"medium\" type=\"button\">\r\n                                    Cancel\r\n                                </RoundedButton>\r\n                                <RoundedButton disableElevation size=\"medium\" type=\"submit\" style={{ marginLeft: '0.5rem' }} variant=\"contained\" color=\"primary\">\r\n                                    {loading? 'Loading...':'Save'}\r\n                                </RoundedButton>\r\n                            </Box>\r\n                        </Box>\r\n\r\n                        <Box style={{ padding: '1rem 1rem 0 1rem' }}>\r\n                            <Typography variant=\"h6\" gutterBottom>\r\n                                New Project\r\n                            </Typography>\r\n                            <div className=\"form-group\">\r\n                                <label>Title</label>\r\n                                <MyTextField fullWidth name=\"title\" variant=\"outlined\" size=\"small\" placeholder=\"project title\"\r\n                                    onChange={handleChange} onBlur={handleBlur}\r\n                                    value={values.title}\r\n                                    error={touched.title && !!errors.title}\r\n                                    helperText={touched.title && errors.title} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Description</label>\r\n                                <MyTextField fullWidth name=\"description\" variant=\"outlined\" size=\"small\" placeholder=\"A short description which explains the project..\"\r\n                                    onChange={handleChange} onBlur={handleBlur}\r\n                                    value={values.description}\r\n                                    multiline\r\n                                    rows={3}\r\n                                    error={touched.description && !!errors.description}\r\n                                    helperText={touched.description && errors.description} />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label>Members</label>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\r\n                                    Only selected members are able to work on this project (you can add them later)\r\n                                </Typography>\r\n                                <Autocomplete\r\n                                    onChange={(e, newValue)=> onEmailSelected(newValue)}\r\n                                    multiple\r\n                                    fullWidth\r\n                                    limitTags={2}\r\n                                    clearOnBlur\r\n                                    id=\"multiple-limit-tags\"\r\n                                    options={selectedMembers}\r\n                                    getOptionLabel={(option) => option.name}\r\n                                    defaultValue={[]}\r\n                                    renderTags={(value, getTagProps) =>\r\n                                        value.map((option, index) => (\r\n                                          <Chip\r\n                                            variant=\"default\"\r\n                                            color='primary'\r\n                                            label={option.name}\r\n                                            avatar={<Avatar alt=\"members\"  src={option.avatar? `${baseURL}/files/${option.avatar}` : userAvatar} />}\r\n                                            {...getTagProps({ index })}\r\n                                          />\r\n                                        ))\r\n                                      }\r\n                                    renderInput={(params) => (\r\n                                        <MyTextField  name=\"members\" variant=\"outlined\" size=\"small\" placeholder=\"Add members to this project\"\r\n                                        {...params} />\r\n                                )}\r\n                              />\r\n                            </div>\r\n\r\n                        </Box>\r\n                    </Form>\r\n                )\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default NewProject;\r\n","import React from 'react';\r\nimport {\r\n  Typography,\r\n  Avatar,\r\n  Box,\r\n  Grid,\r\n  Paper,\r\n  makeStyles,\r\n  Divider,\r\n  Tooltip\r\n} from '@material-ui/core';\r\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\r\nimport RoundedButton from '../../../components/RoundedButton';\r\nimport clsx from 'clsx';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport useSidenav from '../../../hooks/useSidenav';\r\nimport NewProject from './NewProject';\r\nimport userAvatar from '../../../assets/avatars/profile.jpg';\r\nimport { AppState, ProjectModel, UserModel } from '../../../models/app.model';\r\nimport Moment from 'react-moment';\r\nimport { useSharedContext } from '../../../context';\r\nimport WithTooltip from '../../../components/WithTooltip';\r\n\r\nconst baseURL = process.env.REACT_APP_BASE_URL;\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  root: {\r\n    padding: '4rem 1.5rem'\r\n  },\r\n  mb: {\r\n    marginBottom: '2.5rem'\r\n  },\r\n  gridContainer: {\r\n    maxWidth: '768px'\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    cursor: 'pointer',\r\n    borderRadius: 10,\r\n  },\r\n  separator: {\r\n    width: '50px',\r\n    height: '2.6px',\r\n    margin: '1rem 0',\r\n    borderRadius: 5\r\n  }\r\n}));\r\n\r\nconst Board = () => {\r\n  const projects = useSelector((state: AppState) => state.projects);\r\n  const classes = useStyle();\r\n  const history = useHistory();\r\n\r\n  const goToScrumboard = (id: string) => {\r\n    if (id) {\r\n      history.push(`/team/scrumboard/${id}`);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Box className={classes.root} overflow=\"auto\" height=\"100%\" minHeight=\"80vh\" display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\r\n\r\n      <Typography align=\"center\" variant=\"h4\" className=\"bg-text-primary fw-700\" gutterBottom>\r\n        Workspace's projects\r\n      </Typography>\r\n      <div className={classes.mb}>\r\n        <NewProjectDialog />  \r\n      </div> \r\n\r\n      <Grid container spacing={2} className={classes.gridContainer}>\r\n        {\r\n          projects.map((item: ProjectModel) => (\r\n            <Grid key={item._id} item xs={12} sm={6} md={4} lg={4}\r\n              onClick={() => goToScrumboard(item._id || '')}\r\n            >\r\n              <Paper elevation={3} className={clsx('bg-white', classes.paper)}>\r\n                <Typography variant=\"subtitle1\" className=\"bg-text-primary text-capitalize\">\r\n                  {item.title}\r\n                </Typography>\r\n                <Typography variant=\"subtitle2\" component=\"strong\" color=\"textSecondary\" gutterBottom>\r\n                  {item.description.substr(0, 90) + '..'}\r\n                </Typography>\r\n                <Divider className={classes.separator} />\r\n\r\n                <AvatarGroup max={4} style={{ marginBottom: '0.5rem' }}>\r\n                  {\r\n                    item.members.map((member: UserModel) => (\r\n                      <Tooltip key={member._id} title={member.name}>\r\n                        <Avatar alt=\"project members\" src={member.avatar ? `${baseURL}/files/${member.avatar}` : userAvatar} />\r\n                      </Tooltip>\r\n                    ))\r\n                  }\r\n                </AvatarGroup>\r\n                <div>\r\n                  <span className=\"bg-text-secondary\">Edited: </span>\r\n                  <Moment fromNow>{item.createdAt}</Moment>\r\n                </div>\r\n              </Paper>\r\n            </Grid>\r\n          ))\r\n        }\r\n      </Grid>\r\n\r\n      {\r\n        projects.length === 0 && (\r\n          <Box mt={4}>\r\n            <Typography variant=\"subtitle1\" component=\"span\" style={{ color: 'lightgray' }} gutterBottom>\r\n              No projects created yet\r\n            </Typography>\r\n          </Box>\r\n        )\r\n      }\r\n    </Box>\r\n  )\r\n}\r\n\r\nconst NewProjectDialog = () => {\r\n  const classes = useStyle();\r\n  const { onSidenavClose, onSidenavOpen, SidenavComponent } = useSidenav('right', 'persistent');\r\n  const { owner, currentUser } = useSharedContext();\r\n  let disabled = !(owner === currentUser._id);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WithTooltip title=\"New Project\"\r\n        text=\"Only the owner of the selected workspace has the ability to add or remove projects.\">\r\n\r\n        <span>\r\n          <RoundedButton disabled={disabled} onClick={onSidenavOpen} variant=\"outlined\" color=\"default\" size=\"large\"\r\n            className={clsx('bg-text-secondary')}>\r\n            CREATE NEW PROJECT\r\n          </RoundedButton>\r\n        </span>\r\n      </WithTooltip>\r\n\r\n      <SidenavComponent>\r\n        <div style={{ overflowY: 'auto', height: 'calc(100% - 56px)', marginTop: '56px', }}>\r\n          <NewProject onSidenavClose={onSidenavClose} />\r\n        </div>\r\n      </SidenavComponent>\r\n    </React.Fragment>\r\n  )\r\n};\r\n\r\nexport default Board;\r\n"],"sourceRoot":""}