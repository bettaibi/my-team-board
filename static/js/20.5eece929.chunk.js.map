{"version":3,"sources":["hooks/useSnackbar/index.tsx","pages/auth/Register/index.tsx"],"names":["useSnackbar","direction","useState","message","open","type","toast","setToast","handleClose","vertical","horizontal","showMsg","SnackbarComponent","useCallback","autoHideDuration","onClose","anchorOrigin","TransitionComponent","Slide","severity","cookies","Cookies","schema","yup","shape","name","required","email","password","min","confirmPassword","oneOf","initialValue","RegisterForm","React","loading","setLoading","history","useHistory","values","resetForm","a","payload","axios","post","res","data","success","set","maxAge","expiredAt","setTimeout","push","console","log","Fragment","initialValues","validationSchema","onSubmit","handleSubmit","handleChange","handleBlur","errors","touched","autoComplete","className","placeholder","variant","size","onChange","onBlur","value","error","helperText","mb","to","disabled","color","Register","theme","useTheme","matches","useMediaQuery","breakpoints","up","gridBasicStyle","minHeight","height","container","item","xs","style","padding","width","pr","sm","md","display","flexDirection","justifyContent","alignItems","src","logo","alt","gutterBottom","mt"],"mappings":"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","file":"static/js/20.5eece929.chunk.js","sourcesContent":["import { useCallback, useState } from \"react\";\r\nimport { \r\n    Snackbar\r\n} from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\ntype Severity = 'error' | 'warning' | 'info' | 'success';\r\n\r\ninterface Direction {\r\n    vertical: 'top' | 'bottom';\r\n    horizontal: 'left' | 'center' | 'right';\r\n}\r\n\r\ninterface ToastState{\r\n    message: string;\r\n    type: Severity;\r\n    open: boolean;\r\n}\r\n\r\nconst useSnackbar = (direction?: Direction) => {\r\n    const [toast, setToast] = useState<ToastState>({message: '', open: false, type: 'success'})\r\n\r\n    function showMsg(message: string, type: Severity): void {\r\n        setToast({message, open: true, type : type});\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setToast({message: '', open: false, type : 'success'});\r\n    };\r\n\r\n    const { vertical, horizontal } = direction || {vertical: 'top', horizontal: 'right'};\r\n\r\n    const SnackbarComponent = useCallback(\r\n        () => (\r\n            <Snackbar \r\n                open={toast.open} \r\n                autoHideDuration={90000} \r\n                onClose={handleClose}\r\n                anchorOrigin={{ vertical, horizontal }}\r\n                key={vertical + horizontal}\r\n                TransitionComponent={Slide}\r\n                >\r\n                <Alert onClose={handleClose} severity={toast.type}>\r\n                    {toast.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        ),\r\n        [toast, vertical, horizontal],\r\n    )\r\n\r\n    return {\r\n        showMsg,\r\n        SnackbarComponent\r\n    };\r\n};\r\n\r\nexport default useSnackbar;","import React from 'react';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport {\r\n    Grid,\r\n    Box,\r\n    Typography,\r\n    Fab\r\n} from '@material-ui/core';\r\n\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport Welcome from '../../../components/Welcome';\r\nimport logo from '../../../assets/logo48.png';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport * as yup from 'yup';\r\nimport MyTextField from '../../../components/MyTextField';\r\nimport axios from 'axios';\r\nimport useSnackbar from '../../../hooks/useSnackbar';\r\nimport { RegisterModel } from '../../../models/auth.model';\r\nimport Cookies from 'universal-cookie';\r\n \r\nconst cookies = new Cookies();\r\n\r\nconst schema = yup.object().shape({\r\n    name: yup.string().required('Full name is required'),\r\n    email: yup.string().required('Email is required').email('Invalid Email'),\r\n    password: yup.string().required('Password is required').min(6, 'password is too short'),\r\n    confirmPassword: yup.string().required('Confirm your password').oneOf([yup.ref('password')], 'Password not match')\r\n});\r\n\r\nconst initialValue = { email: '', password: '', name: '', confirmPassword: ''};\r\n\r\nconst Register: React.FC = () => {\r\n    const theme = useTheme();\r\n    const matches = useMediaQuery(theme.breakpoints.up('sm'));\r\n    const gridBasicStyle = { minHeight: '100vh', height: '100%' };\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs style={matches ? { padding: '3rem', ...gridBasicStyle } : { padding: '1.5rem', ...gridBasicStyle }}>\r\n                <Box width=\"100%\" pr={{ xs: 0, sm: 3, md: 5 }} height=\"100%\" display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"flex-start\">\r\n                    <img src={logo} alt=\"app logo\" /> <br />\r\n                    <Typography variant=\"h4\" className=\"fw-700 bg-text-primary\" gutterBottom>\r\n                        Sign up\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                        Already have an account? &nbsp;\r\n                        <Link to=\"/login\">Sign in</Link>\r\n                    </Typography>\r\n                    <Box mt={1} width=\"100%\">\r\n                        <RegisterForm />\r\n                    </Box>\r\n                </Box>\r\n            </Grid>\r\n            {matches && <Grid item xs={6}>\r\n                <Welcome />\r\n            </Grid>}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst RegisterForm = () => {\r\n    const { SnackbarComponent, showMsg } = useSnackbar();\r\n    const [loading, setLoading] = React.useState<boolean>(false);\r\n    const history = useHistory();\r\n\r\n    async function handleSubmit(values: RegisterModel, resetForm: () => void) {\r\n        try {\r\n                setLoading(true)\r\n                const {confirmPassword, ...payload} = values;\r\n                const res = await axios.post(`/auth/register`, payload);\r\n                if(res.data.success) {\r\n                    showMsg(res.data.message, 'success');\r\n                    cookies.set('isLogged', 'OK', {maxAge: res.data.expiredAt})\r\n                    resetForm();\r\n                    setTimeout(()=> {\r\n                        history.push('/team');\r\n                    },1000);\r\n                }\r\n                else{\r\n                    setLoading(false);\r\n                    showMsg(res.data.message, 'error');\r\n                }\r\n        }\r\n        catch (err) {\r\n            setLoading(false);\r\n            showMsg('Invalid Credentials', 'error');\r\n            console.log(err)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Formik initialValues={initialValue} validationSchema={schema} onSubmit={(values, { resetForm }) => handleSubmit(values, resetForm)}>\r\n                {\r\n                    ({ handleSubmit, handleChange, handleBlur, errors, values, touched }) => (\r\n                        <Form onSubmit={handleSubmit} autoComplete=\"off\">\r\n                            <div className=\"form-group\">\r\n                                <label className=\"bg-text-secondary\">Full Name *</label>\r\n                                <MyTextField\r\n                                    className=\"w-100\"\r\n                                    placeholder=\"Enter your name\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    name=\"name\"\r\n                                    value={values.name}\r\n                                    error={touched.name && !!errors.name}\r\n                                    helperText={touched.name && errors.name} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"bg-text-secondary\">Email Address *</label>\r\n                                <MyTextField\r\n                                    className=\"w-100\"\r\n                                    placeholder=\"Enter your email\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    name=\"email\"\r\n                                    value={values.email}\r\n                                    error={touched.email && !!errors.email}\r\n                                    helperText={touched.email && errors.email} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"bg-text-secondary\">Password *</label>\r\n                                <MyTextField\r\n                                    className=\"w-100\"\r\n                                    placeholder=\"Enter your password\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    type='password'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    name=\"password\"\r\n                                    value={values.password}\r\n                                    error={touched.password && !!errors.password}\r\n                                    helperText={touched.password && errors.password} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"bg-text-secondary\">Confirm password *</label>\r\n                                <MyTextField\r\n                                    className=\"w-100\"\r\n                                    placeholder=\"Confirm password\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    type='password'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    name=\"confirmPassword\"\r\n                                    value={values.confirmPassword}\r\n                                    error={touched.confirmPassword && !!errors.confirmPassword}\r\n                                    helperText={touched.confirmPassword && errors.confirmPassword} />\r\n                            </div>\r\n                            <Box className=\"text-right\" mb={2}>\r\n                                <Link to='/forgot-password'>Forgot password?</Link>\r\n                            </Box>\r\n                            <Fab disabled={loading} type=\"submit\" className=\"w-100\" variant=\"extended\" color=\"primary\">\r\n                                {loading ? 'Loading...' : 'Create your free account'}\r\n                            </Fab>\r\n                        </Form>\r\n                    )\r\n                }\r\n            </Formik>\r\n            <SnackbarComponent />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n"],"sourceRoot":""}