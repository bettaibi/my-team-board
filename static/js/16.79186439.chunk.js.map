{"version":3,"sources":["hooks/useSidenav/index.tsx","components/MyAccordion/index.tsx","pages/Team/Chat/ChatDetails.tsx","assets/chat/bg1.svg","pages/Team/Chat/index.tsx"],"names":["useStyles","makeStyles","theme","drawerOpen","breakpoints","down","width","drawerClose","useSidenav","anchor","variant","state","classes","useToggle","onSidenavClose","handleClose","onSidenavOpen","handleOpen","show","onSidenavToggle","toggle","SidenavComponent","children","transitionDuration","enter","exit","open","onClose","className","clsx","paper","overflow","createStyles","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","color","palette","text","secondary","MyAccordion","label","description","isOpen","defaultExpanded","expandIcon","aria-controls","id","lightGrayIcons","backgroundColor","mr","marginRight","spacing","ChatDetails","member","Fragment","Box","height","p","boxShadow","display","flex-direction","alignItems","justifyContent","Typography","name","Tooltip","title","IconButton","size","onClick","CloseOutlined","flexDirection","flexGrow","MyTextField","disabled","fullWidth","value","email","baseURL","process","root","position","backgroundRepeat","backgroundImage","bgImage","backgroundAttachment","backgroundSize","iconColor","bgLightBlue","fileAttachment","cursor","padding","marginBottom","marginTop","downloadLink","textDecoration","ChatHeader","memberId","useSelector","members","find","item","_id","onlineUsers","useSocketContext","useEffect","sessionStorage","setItem","JSON","stringify","Avatar","src","avatar","userAvatar","alt","ml","hasOwnProperty","lastSeen","fromNow","MessageEditor","React","useState","setText","toggleImoji","useSharedContext","currentUser","selectedWorkspace","dispatch","onCallStart","useVideoCallContext","sendMessage","showMsg","useNotificationContext","onMutate","useMutation","fileRef","useRef","imageRef","a","obj","workspace","sender","sentAt","Date","axios","post","data","success","PostNewMessage","console","error","isMemberConnected","err","e","window","confirm","fd","FormData","target","files","file","append","url","method","res","borderRadius","border","InputBase","onChange","multiline","maxRows","placeholder","inputProps","borderTop","set","onSelect","emoji","trim","native","displayEmoji","style","bottom","left","zIndex","SentimentVerySatisfiedOutlined","current","click","CropOriginal","ref","hidden","multiple","accept","type","AttachFile","PhoneOutlined","VideoCallOutlined","Divider","orientation","flexItem","margin","SendOutlined","Messages","chat","messages","setMessages","messageRef","scrollIntoView","behavior","fetchMessages","get","setChat","length","Comment","component","gutterBottom","map","index","message","myId","last","FileAttachment","mine","href","download","maxWidth","ArrowDropDownCircleOutlined","mx","format","ImagesGrid","pictures","Message","ChatDetailsDialog","InfoOutlined","overflowY","Chat","props","match","params"],"mappings":"2LAWMA,EAAYC,aAAW,SAACC,GAAD,YAAmB,CAE5CC,YAAU,mBACLD,EAAME,YAAYC,KAAK,MAAQ,CAC5BC,MAAO,SAFL,sBAIC,OAJD,GAMVC,YAAa,CACTD,MAAO,OA4CAE,IAxCI,SAACC,EAAiBC,EAAkBC,GACnD,IAAMC,EAAUZ,IAChB,EAAkGa,YAAUF,IAAS,GAAhGG,EAArB,EAAQC,YAAyCC,EAAjD,EAAqCC,WAA2BC,EAAhE,EAAgEA,KAAcC,EAA9E,EAAsEC,OA4BtE,MAAO,CACHN,iBACAE,gBACAG,kBACAE,iBA9B+B,SAAC,GAAkB,IAAD,IAAfC,EAAe,EAAfA,SAElC,OACI,cAAC,IAAD,CACAC,mBAAoB,CAAEC,MAAO,IAAKC,KAAM,KACpCf,QAASA,EACTD,OAAQA,EACRiB,KAAMR,EACNS,QAASb,EACTc,UAAWC,aAAI,mBACVjB,EAAQT,WAAae,GADX,cAEVN,EAAQL,aAAeW,GAFb,IAIfN,QAAS,CACLkB,MAAOD,aAAI,mBACRjB,EAAQT,WAAae,GADb,cAERN,EAAQL,aAAeW,GAFf,KAXnB,SAgBI,cAAC,IAAD,CAAKa,SAAS,SAAd,SACKT,OAWbJ,U,iCC3DR,uFAUMlB,EAAYC,aAAW,SAACC,GAAD,OAC3B8B,YAAa,CACXC,QAAS,CACLC,SAAUhC,EAAMiC,WAAWC,QAAQ,IACnCC,UAAW,SACXC,WAAY,GAEhBC,iBAAkB,CACdL,SAAUhC,EAAMiC,WAAWC,QAAQ,IACnCI,MAAOtC,EAAMuC,QAAQC,KAAKC,gBA8BnBC,IArBiC,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,YAAaxB,EAAsB,EAAtBA,SAAUyB,EAAY,EAAZA,OACtEnC,EAAUZ,IAEhB,OACQ,eAAC,IAAD,CAAWgD,gBAAmBD,IAAU,EAAxC,UACI,eAAC,IAAD,CACIE,WAAY,cAAC,IAAD,IACZC,gBAAc,kBACdC,GAAG,iBAHP,UAII,cAAC,IAAD,CAAYvB,UAAWhB,EAAQqB,QAA/B,SAAyCY,IACxCC,GAAe,cAAC,IAAD,CAAYlB,UAAWhB,EAAQ2B,iBAA/B,SAAkDO,OAEtE,cAAC,IAAD,UAEOxB,S,sXC1BjBtB,EAAYC,aAAW,SAACC,GAAD,MAAmB,CAC5CkD,eAAgB,CACZC,gBAAiB,WAErBC,GAAI,CACAC,YAAarD,EAAMsD,QAAQ,QAkFpBC,EA1EiC,SAAC,GAAgC,IAA9B3C,EAA6B,EAA7BA,eAAgB4C,EAAa,EAAbA,OACzD9C,EAAUZ,IAEhB,OACI,eAAC,IAAM2D,SAAP,WACI,eAACC,EAAA,EAAD,CAAKC,OAAO,OAAOC,EAAG,EAAGC,UAAU,oCAAoCC,QAAQ,OAAOC,iBAAe,MAAMC,WAAW,SAASC,eAAe,gBAA9I,UACI,eAACP,EAAA,EAAD,WACI,cAACQ,EAAA,EAAD,CAAY1D,QAAQ,KAAKkB,UAAU,kBAAnC,qBAGA,eAACwC,EAAA,EAAD,CAAY1D,QAAQ,QAAQ8B,MAAM,gBAAlC,qBACMkB,QADN,IACMA,OADN,EACMA,EAAQW,WAIlB,cAACC,EAAA,EAAD,CAASC,MAAM,QAAf,SACI,cAACC,EAAA,EAAD,CAAY5C,UAAWhB,EAAQwC,eAAgBqB,KAAK,QAChDC,QAAS5D,EADb,SAEI,cAAC6D,EAAA,EAAD,WA0BZ,cAAC/B,EAAA,EAAD,CAAaC,MAAM,QAAQE,QAAQ,EAAnC,SACI,eAACa,EAAA,EAAD,CAAKI,QAAQ,OAAOY,cAAc,SAASC,SAAU,EAArD,UACA,sBAAKjD,UAAU,aAAf,UACI,yCACA,cAACkD,EAAA,EAAD,CAAaC,UAAQ,EAACC,WAAS,EAACtE,QAAQ,WAAW+D,KAAK,QAAQQ,MAAK,OAAEvB,QAAF,IAAEA,OAAF,EAAEA,EAAQW,UAEnF,sBAAKzC,UAAU,aAAf,UACI,0CACA,cAACkD,EAAA,EAAD,CAAaC,UAAQ,EAACC,WAAS,EAACtE,QAAQ,WAAW+D,KAAK,QAAQQ,OAAa,OAANvB,QAAM,IAANA,OAAA,EAAAA,EAAQa,QAAS,mBAE5F,sBAAK3C,UAAU,aAAf,UACI,0CACA,cAACkD,EAAA,EAAD,CAAaC,UAAQ,EAACC,WAAS,EAACtE,QAAQ,WAAW+D,KAAK,QAAQQ,MAAK,OAAEvB,QAAF,IAAEA,OAAF,EAAEA,EAAQwB,gBAIvF,cAACtC,EAAA,EAAD,CAAaC,MAAM,yBAAnB,kDAGA,cAACD,EAAA,EAAD,CAAaC,MAAM,kBAAnB,kDAGA,cAACD,EAAA,EAAD,CAAaC,MAAM,gBAAnB,+C,OC/FG,MAA0B,gC,yFC4CnCsC,EAAUC,0CAEVpF,EAAYC,aAAW,SAACC,GAAD,MAAmB,CAC5CmF,KAAM,CACFxB,OAAQ,qBACRyB,SAAU,WACVtB,QAAS,OACTY,cAAe,SACfW,iBAAkB,YAClBC,gBAAgB,OAAD,OAASC,EAAT,KACfC,qBAAsB,QACtBC,eAAgB,QAChBrF,MAAO,OACPyB,SAAU,UAEd6D,UAAW,CACPpD,MAAO,WAEXc,GAAI,CACAC,YAAarD,EAAMsD,QAAQ,KAE/BqC,YAAa,CACTxC,gBAAiB,WAErByC,eAAgB,CACZC,OAAQ,UACRvD,MAAO,kBACPwD,QAAS,WACTC,aAAc,MACdC,UAAW,OAEfC,aAAc,CACV,UAAW,CACPC,eAAgB,wBA6BtBC,EAAa,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,SACZ5C,EAAS6C,aAAY,SAAC5F,GAAD,OAAqBA,EAAM6F,WACjDC,MAAK,SAACC,GAAD,OAAqBA,EAAKC,MAAQL,KACpCM,EAAgBC,cAAhBD,YAQR,OANAE,qBAAU,WACHpD,GACCqD,eAAeC,QAAQ,aAAcC,KAAKC,UAAUxD,MAEzD,CAAC4C,IAGA,eAAC,IAAM3C,SAAP,WACI,eAACC,EAAA,EAAD,CAAKI,QAAQ,OAAOY,cAAc,MAAMV,WAAW,SAASC,eAAe,QAA3E,UACKT,GAAU,cAACyD,EAAA,EAAD,CAAQC,IAAK1D,EAAO2D,OAAP,UAAmBlC,EAAnB,kBAAoCzB,EAAO2D,QAAWC,IAAYC,IAAI,aAC9F,eAAC3D,EAAA,EAAD,CAAKI,QAAQ,OAAOY,cAAc,SAAS4C,GAAI,EAA/C,UACI,cAACpD,EAAA,EAAD,CAAY1D,QAAQ,YAAYkB,UAAU,kBAA1C,gBACK8B,QADL,IACKA,OADL,EACKA,EAAQW,OAEb,uBAAOzC,UAAU,oBAAjB,UAEc,OAAN8B,QAAM,IAANA,OAAA,EAAAA,EAAQiD,MACJC,EAAYa,eAAe/D,EAAOiD,KAClCC,EAAYlD,EAAOiD,KAAKe,SACpB,cAAC,IAAD,CAAQC,SAAO,EAAf,SAAiBf,EAAYlD,EAAOiD,KAAKe,WACzC,aAAe,wBAKvC,cAAC9D,EAAA,EAAD,UACI,cAAC,GAAD,CAAmBF,OAAQA,UAMrCkE,GAAgB,SAAC,GAAwC,IAAtCtB,EAAqC,EAArCA,SACf1F,EAAUZ,IAChB,EAAwB6H,IAAMC,SAAiB,IAA/C,mBAAOpF,EAAP,KAAaqF,EAAb,KACA,EAAsClH,cAA9BK,EAAR,EAAQA,KAAc8G,EAAtB,EAAc5G,OACd,EAAqD6G,cAA7CC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,kBAAmBC,EAAxC,EAAwCA,SAChCC,EAAgBC,cAAhBD,YACR,EAAqCxB,cAA7B0B,EAAR,EAAQA,YAAa3B,EAArB,EAAqBA,YACb4B,EAAYC,cAAZD,QACAE,EAAaC,cAAbD,SAEJE,EAAUC,mBACVC,EAAWD,mBAX2C,4CAsB1D,gCAAAE,EAAA,sEAEcC,EAAoB,CACtBtG,OACA8D,QAAS,CAACF,EAAU4B,EAAYvB,KAAO,IACvCsC,UAAWd,GAAqB,GAChCe,OAAQhB,EAAYvB,KAAO,GAC3BwC,OAAQ,IAAIC,MAPxB,SAS+BC,IAAMC,KAAK,YAAaN,GATvD,iBASgBO,EAThB,EASgBA,MACCC,UACLzB,EAAQ,IACRK,EAASqB,YAAeF,EAAKA,KAAMjD,IACnCiC,EAAYJ,EAAmB7B,EAAUiD,EAAKA,OAb1D,gDAiBQG,QAAQC,MAAR,MAjBR,0DAtB0D,kEA2C1D,sBAAAZ,EAAA,sDACI,IAC8Ba,YAAkBtD,EAAUM,GAKlDyB,EAAY,QAAQ,GAHpBG,EAAQ,oDAAqD,WAMrE,MAAMqB,GACFH,QAAQC,MAAME,GAXtB,4CA3C0D,kEA0D1D,sBAAAd,EAAA,sDACI,IAC8Ba,YAAkBtD,EAAUM,GAKlDyB,EAAY,QAAQ,GAHpBG,EAAQ,oDAAqD,WAMrE,MAAMqB,GACFH,QAAQC,MAAME,GAXtB,4CA1D0D,oEAyE1D,WAAkCC,GAAlC,uBAAAf,EAAA,mEAEuBgB,OAAOC,QAAP,iDAFvB,iBAIkBC,EAAK,IAAIC,SAJ3B,cAK6BJ,EAAEK,OAAOC,OALtC,IAKY,2BAASC,EAAwB,QAC7BJ,EAAGK,OAAO,WAAYD,GANtC,8CAQ8B3B,EAAS,CACvB6B,IAAI,mBAAD,OAAqBpC,EAArB,YAA0C7B,GAC7CkE,OAAQ,QACRjB,KAAMU,IAXtB,QAQkBQ,EARlB,QAaoBjB,SACJpB,EAASqB,YAAegB,EAAIlB,KAAMjD,IAdlD,0DAmBQoD,QAAQC,MAAR,MAnBR,2DAzE0D,oEAgG1D,WAAgCG,GAAhC,iBAAAf,EAAA,mEAEuBgB,OAAOC,QAAP,gDAFvB,uBAIkBC,EAAK,IAAIC,UACZI,OAAO,OAAQR,EAAEK,OAAOC,MAAM,IAL7C,SAM8B1B,EAAS,CACvB6B,IAAI,qBAAD,OAAuBpC,EAAvB,YAA4C7B,GAC/CkE,OAAQ,QACRjB,KAAMU,IATtB,QAMkBQ,EANlB,QAWoBjB,SACJpB,EAASqB,YAAegB,EAAIlB,KAAMjD,IAZlD,yDAiBQoD,QAAQC,MAAR,MAjBR,2DAhG0D,sBAqH1D,OACI,eAAC/F,EAAA,EAAD,CAAK8G,aAAc,EAAGC,OAAO,sBAAsB5I,SAAS,SAASH,UAAU,WAA/E,UACI,cAACgC,EAAA,EAAD,CAAKE,EAAG,EAAR,SACI,cAAC8G,EAAA,EAAD,CACIC,SAvGhB,SAA0Bf,GACtB/B,EAAQ+B,EAAEK,OAAOlF,QAuGLA,MAAOvC,EACPoI,WAAS,EACTC,QAAS,EACT/F,WAAS,EACTgG,YAAY,kCACZC,WAAY,CAAE,aAAc,aAEpC,eAACrH,EAAA,EAAD,CAAKhC,UAAWhB,EAAQiF,YAAaqF,UAAU,sBAAsBpH,EAAG,EAAGE,QAAQ,OAAOY,cAAc,MAAMV,WAAW,SAASC,eAAe,gBAAjJ,UACI,gCACKjD,GAAQ,cAAC,IAAD,CAAQiK,IAAI,UAAUC,SAAU,SAACC,GAAD,OAtHzD,SAAsBA,GAClBtD,GAAQ,SAACpH,GAAD,OAAmBA,EAAM2K,OAAS,IAAMD,EAAME,UACtDvD,IAoHgEwD,CAAaH,IAC7DI,MAAO,CAAEnG,SAAU,WAAYoG,OAAQ,OAAQC,KAAM,SAAUC,OAAQ,MAAOtL,MAAO,WAGzF,cAACkE,EAAA,EAAD,CAAY5C,UAAWhB,EAAQ0C,GAAImB,KAAK,QAAQC,QAASsD,EAAzD,SACI,cAAC6D,EAAA,EAAD,CAAgCjK,UAAWhB,EAAQgF,cAGvD,eAAC,IAAMjC,SAAP,WACI,cAACW,EAAA,EAAD,CAASC,MAAM,cAAf,SACI,cAACC,EAAA,EAAD,CAAY5C,UAAWhB,EAAQ0C,GAAImB,KAAK,QAAQC,QAAS,kBAAMoE,EAASgD,QAAQC,SAAhF,SACI,cAACC,EAAA,EAAD,CAAcpK,UAAWhB,EAAQgF,gBAGzC,uBAAOiF,SAjJ+B,6CAiJDoB,IAAKnD,EAAUzE,KAAK,WACrD6H,QAAM,EAACC,UAAQ,EAACC,OAAO,UAAUC,KAAK,YAG9C,eAAC,IAAM1I,SAAP,WACI,cAACW,EAAA,EAAD,CAASC,MAAM,kBAAf,SACI,cAACC,EAAA,EAAD,CAAY5C,UAAWhB,EAAQ0C,GAAImB,KAAK,QAAQC,QAAS,kBAAMkE,EAAQkD,QAAQC,SAA/E,SACI,cAACO,EAAA,EAAD,CAAY1K,UAAWhB,EAAQgF,gBAGvC,uBAAOiF,SA3J+B,6CA2JHoB,IAAKrD,EAASsD,QAAM,EAACG,KAAK,OAAOhI,KAAK,OACrE+H,OAAO,uDAGnB,sBAAKX,MAAO,CAAEzH,QAAS,QAAvB,UACI,cAACM,EAAA,EAAD,CAASC,MAAM,aAAf,SACI,cAACC,EAAA,EAAD,CAAY5C,UAAWhB,EAAQ0C,GAAImB,KAAK,QAAQC,QAjKV,2CAiKtC,SACI,cAAC6H,EAAA,EAAD,CAAe3K,UAAWhB,EAAQgF,gBAG1C,cAACtB,EAAA,EAAD,CAASC,MAAM,aAAf,SACI,cAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,QAtKa,2CAsKtC,SACI,cAAC8H,EAAA,EAAD,CAAmB5K,UAAWhB,EAAQgF,gBAG9C,cAAC6G,EAAA,EAAD,CAASC,YAAY,WAAWC,UAAQ,EAAClB,MAAO,CAAEmB,OAAQ,WAAYtM,MAAO,SAC7E,cAACgE,EAAA,EAAD,CAASC,MAAM,OAAf,SACI,+BACI,cAACC,EAAA,EAAD,CAAYC,KAAK,QAAQM,SAAmB,KAATrC,EAC/BgC,QA9K8B,2CA6KlC,SAEI,cAACmI,EAAA,EAAD,CAAcjL,UAAWhB,EAAQgF,4BAU3DkH,GAAW,SAAC,GAAwC,IAAtCxG,EAAqC,EAArCA,SAEVyG,EAAOxG,aAAY,SAAC5F,GAAD,OAAqBA,EAAMoM,QACpD,EAAgClF,IAAMC,SAAyBiF,EAAKzG,IAAa,IAAjF,mBAAO0G,EAAP,KAAiBC,EAAjB,KAEMC,EAAarE,iBAAuB,MAC1C,EAAqDZ,cAA7CE,EAAR,EAAQA,kBAAmBD,EAA3B,EAA2BA,YAAaE,EAAxC,EAAwCA,SA4BxC,OA1BAtB,qBAAU,WAAO,IAAD,EACZ,UAAAoG,EAAWpB,eAAX,SAAoBqB,eAAe,CAAEC,SAAU,aAChD,CAACJ,IAEJlG,qBAAU,WACN,IAAMuG,EAAa,uCAAG,8BAAAtE,EAAA,+EAESM,IAAMiE,IAAN,oBAAuBnF,EAAvB,YAA4C7B,IAFrD,iBAENiD,EAFM,EAENA,MACCC,UACLpB,EAASmF,YAAQhE,EAAKA,KAAMjD,IAC5B2G,EAAY1D,EAAKA,OALP,gDASdG,QAAQC,MAAR,MATc,yDAAH,qDAadoD,EAAKtF,eAAenB,GAIrB2G,EAAYF,EAAKzG,IAHjB+G,MAKL,CAAC/G,EAAUyG,IAEU,IAApBC,EAASQ,OAEL,eAAC5J,EAAA,EAAD,CAAKI,QAAQ,OAAOY,cAAc,SAASV,WAAW,SAASC,eAAe,SAASN,OAAO,OAA9F,UACI,cAAC4J,EAAA,EAAD,CAAShC,MAAO,CAAEjJ,MAAO,UAAWN,SAAU,MAC9C,cAACkC,EAAA,EAAD,CAAY1D,QAAQ,KAAKgN,UAAU,OAAOjC,MAAO,CAAEjJ,MAAO,WAAamL,cAAY,EAAnF,yCAQR,cAAC,IAAMhK,SAAP,UAEQqJ,EAASY,KAAI,SAAClH,EAAoBmH,GAArB,OACT,qBAAoB5B,IAAKiB,EAAzB,SACI,cAAC,GAAD,CAASY,QAASpH,EAAMqH,KAAM7F,EAAYvB,KAAO,GAC7CqH,KAAMhB,EAASQ,SAAYK,EAAQ,KAFjCnH,EAAKC,WAU7BsH,GAAiB,SAAC,GAAiE,IAA/DH,EAA8D,EAA9DA,QAASI,EAAqD,EAArDA,KACzBtN,EAAUZ,IAEhB,OACI,cAACsE,EAAA,EAAD,CAASC,MAAM,WAAf,SACI,mBAAG3C,UAAWhB,EAAQuF,aAAcgE,OAAO,SAASgE,KAAI,UAAKhJ,EAAL,kBAAsB2I,EAAQzD,MAAQ+D,SAAUN,EAAQzD,KAAhH,SACI,eAACzG,EAAA,EAAD,CAAKI,QAAQ,OAAOY,cAAc,MAAMV,WAAW,SAASmK,SAAS,QACjE3D,aAAc,GAAI9I,UAAWC,YAAKjB,EAAQkF,eAAgB,CACtD,gBAAiBoI,EACjB,mBAAoBA,IAH5B,UAKI,cAACI,EAAA,EAAD,IACA,eAAC1K,EAAA,EAAD,CAAK2K,GAAI,EAAT,UACI,cAACnK,EAAA,EAAD,CAAY1D,QAAQ,YAApB,gCACA,kDACI,cAAC,IAAD,CAAQ8N,OAAO,aAAf,gBACKV,QADL,IACKA,OADL,EACKA,EAAS3E,uBAUpCsF,GAAa,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,SACF1O,IAEhB,OACI,qBAAK4B,UAAU,UAAf,SAEQ8M,EAASd,KAAI,SAAClH,EAAMmH,GAAP,OACT,wBAA4BjM,UAAS,sBAAiBiM,GAAtD,SACI,mBAAGM,KAAI,UAAKhJ,EAAL,kBAAsBuB,GAAQ0H,UAAQ,EAACjE,OAAO,SAArD,SACI,qBAAK/C,IAAG,UAAKjC,EAAL,kBAAsBuB,GAAQa,IAAG,aAAQsG,QAFzD,aAAmBA,UAWjCc,GAAU,SAAC,GAAqF,IAAnFb,EAAkF,EAAlFA,QAASC,EAAyE,EAAzEA,KAAMC,EAAmE,EAAnEA,KAC9B,EAAyBnN,cAAjBK,EAAR,EAAQA,KAAME,EAAd,EAAcA,OAEd,OACI,cAAC,IAAMuC,SAAP,UAEQmK,EAAQ5E,SAAW6E,EACf,sBAAKnM,UAAU,gBAAf,UAEQkM,EAAQpL,MACJ,qCACI,qBAAKd,UAAWC,YAAK,UAAW,CAAE,KAAQmM,IAAStJ,QAAStD,EAA5D,SACK0M,EAAQpL,OAEZsL,GAAQ,uBAAOvC,MAAO,CAAElI,YAAa,UAAY3B,UAAU,oBAAnD,SACL,cAAC,IAAD,CAAQ+F,SAAO,EAAf,SACKmG,EAAQ3E,YAGf6E,GAAQ9M,GAAQ,uBAAOuK,MAAO,CAAElI,YAAa,UAAY3B,UAAU,oBAAnD,SACd,cAAC,IAAD,CAAQ+F,SAAO,EAAf,SACKmG,EAAQ3E,cAOzB2E,EAAQzD,MACJ,cAAC,GAAD,CAAgByD,QAASA,EAASI,MAAM,IAI5CJ,EAAQY,UACJ,cAAC,GAAD,CAAYA,SAAUZ,EAAQY,cAK1C,sBAAK9M,UAAU,iBAAf,UAEQkM,EAAQpL,MACJ,qCACI,qBAAKd,UAAWC,YAAK,UAAW,CAAE,KAAQmM,IAAStJ,QAAStD,EAA5D,SACK0M,EAAQpL,OAEZsL,GAAQ,uBAAOvC,MAAO,CAAElI,YAAa,UAAY3B,UAAU,oBAAnD,SACL,cAAC,IAAD,CAAQ+F,SAAO,EAAf,SACKmG,EAAQ3E,YAGf6E,GAAQ9M,GAAQ,uBAAOuK,MAAO,CAAElI,YAAa,UAAY3B,UAAU,oBAAnD,SACd,cAAC,IAAD,CAAQ+F,SAAO,EAAf,SACKmG,EAAQ3E,cAOzB2E,EAAQzD,MACJ,cAAC,GAAD,CAAgByD,QAASA,EAASI,MAAM,IAI5CJ,EAAQY,UACJ,cAAC,GAAD,CAAYA,SAAUZ,EAAQY,iBAaxDE,GAAgD,SAAC,GAAgB,IAAdlL,EAAa,EAAbA,OAC/C9C,EAAUZ,IAChB,EAA4DQ,YAAW,QAAS,cAAxEa,EAAR,EAAQA,iBAAkBP,EAA1B,EAA0BA,eAAgBE,EAA1C,EAA0CA,cAE1C,OACI,eAAC,IAAM2C,SAAP,WACI,cAACa,EAAA,EAAD,CAAYE,QAAS1D,EAArB,SACI,cAAC6N,EAAA,EAAD,CAAcjN,UAAWhB,EAAQgF,cAGrC,cAACvE,EAAD,UACI,qBAAKoK,MAAO,CAAEqD,UAAW,OAAQjL,OAAQ,oBAAqBqC,UAAW,QAAzE,SACI,cAAC,EAAD,CAAapF,eAAgBA,EAAgB4C,OAAQA,YAO1DqL,UA/bF,SAACC,GACV,IAAMpO,EAAUZ,IACVsG,EAAW0I,EAAMC,MAAMC,OAAO5I,SAEpC,OACI,eAAC1C,EAAA,EAAD,CAAKhC,UAAWhB,EAAQyE,KAAxB,UAEI,cAACzB,EAAA,EAAD,CAAKC,OAAO,OAAOE,UAAU,oCAAoCD,EAAG,EAAGE,QAAQ,OAAOY,cAAc,MAAMhD,UAAU,WAChHsC,WAAW,SAASC,eAAe,gBADvC,SAEI,cAAC,EAAD,CAAYmC,SAAUA,MAG1B,cAAC1C,EAAA,EAAD,CAAKiB,SAAU,EAAGf,EAAG,EAAGE,QAAQ,OAAOY,cAAc,SAAS7C,SAAS,OACnEH,UAAU,iBADd,SAEI,cAAC,GAAD,CAAU0E,SAAUA,MAGxB,cAAC1C,EAAA,EAAD,CAAK6H,MAAO,CAAEzF,QAAS,eAAiBV,SAAS,SAASoG,OAAQ,EAAlE,SACI,cAAC,GAAD,CAAepF,SAAUA","file":"static/js/16.79186439.chunk.js","sourcesContent":["import React from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\nimport useToggle from '../useToggle';\r\nimport { Box } from '@material-ui/core';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\n\r\ntype Anchors = 'left' | 'right' | 'top' | 'bottom';\r\ntype Variant = 'temporary' | 'permanent' | 'persistent';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n\r\n    drawerOpen: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            width: '100%'\r\n        },\r\n        width: '40%',\r\n    },\r\n    drawerClose: {\r\n        width: 0,\r\n    },\r\n}));\r\n\r\nconst useSidenav = (anchor: Anchors, variant: Variant, state?: boolean) => {\r\n    const classes = useStyles();\r\n    const { handleClose: onSidenavClose, handleOpen: onSidenavOpen, show, toggle: onSidenavToggle } = useToggle(state || false);\r\n\r\n    const SidenavComponent: React.FC = ({ children }) => {\r\n\r\n        return (\r\n            <Drawer\r\n            transitionDuration={{ enter: 500, exit: 1000 }}\r\n                variant={variant}\r\n                anchor={anchor}\r\n                open={show}\r\n                onClose={onSidenavClose}\r\n                className={clsx({\r\n                    [classes.drawerOpen]: show,\r\n                    [classes.drawerClose]: !show,\r\n                  })}\r\n                classes={{\r\n                    paper: clsx({\r\n                      [classes.drawerOpen]: show,\r\n                      [classes.drawerClose]: !show,\r\n                    }),\r\n                  }} >\r\n                <Box overflow=\"hidden\">\r\n                    {children}\r\n                </Box>\r\n            </Drawer>\r\n        )\r\n    };\r\n\r\n    return {\r\n        onSidenavClose,\r\n        onSidenavOpen,\r\n        onSidenavToggle,\r\n        SidenavComponent,\r\n        show\r\n    };\r\n\r\n};\r\n\r\nexport default useSidenav;","import React from 'react';\r\nimport {\r\n    Accordion,\r\n    Typography,\r\n    AccordionSummary,\r\n    AccordionDetails\r\n} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        flexBasis: '33.33%',\r\n        flexShrink: 0,\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: theme.palette.text.secondary,\r\n    }\r\n  }),\r\n);\r\ninterface MyAccordionProps{\r\n    label: string;\r\n    description?: string;\r\n    isOpen?: boolean;\r\n}\r\nconst MyAccordion: React.FC<MyAccordionProps> = ({label, description, children, isOpen}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n            <Accordion defaultExpanded = {isOpen || false}>\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\">\r\n                    <Typography className={classes.heading}>{label}</Typography>\r\n                    {description && <Typography className={classes.secondaryHeading}>{description}</Typography>}\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                   {\r\n                       children\r\n                   }\r\n                </AccordionDetails>\r\n            </Accordion>\r\n    )\r\n}\r\n\r\nexport default MyAccordion;\r\n","import React from 'react';\r\nimport {\r\n    Box,\r\n    Typography,\r\n    IconButton,\r\n    Tooltip,\r\n    makeStyles,\r\n    Theme,\r\n} from '@material-ui/core';\r\nimport {\r\n    CloseOutlined\r\n} from '@material-ui/icons';\r\nimport { UserModel } from '../../../models/app.model';\r\nimport MyAccordion from '../../../components/MyAccordion';\r\nimport MyTextField from '../../../components/MyTextField';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    lightGrayIcons: {\r\n        backgroundColor: '#f5f4f4'\r\n    },\r\n    mr: {\r\n        marginRight: theme.spacing(3)\r\n    }\r\n}));\r\n\r\ninterface ChatDetailsProps {\r\n    onSidenavClose: () => void;\r\n    member: UserModel | undefined;\r\n}\r\nconst ChatDetails: React.FC<ChatDetailsProps> = ({ onSidenavClose, member }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Box height=\"70px\" p={2} boxShadow=\"0 .125rem .25rem rgba(0,0,0,.075)\" display=\"flex\" flex-direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Box>\r\n                    <Typography variant=\"h6\" className=\"bg-text-primary\">\r\n                        Details\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                        #{member?.name}\r\n                    </Typography>\r\n                </Box>\r\n\r\n                <Tooltip title=\"Close\">\r\n                    <IconButton className={classes.lightGrayIcons} size=\"small\"\r\n                        onClick={onSidenavClose}>\r\n                        <CloseOutlined />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </Box>\r\n\r\n            {/* <Box p={2} display=\"flex\" flexDirection=\"row\"\r\n                alignItems=\"center\" justifyContent=\"center\">\r\n                <Tooltip title=\"Audio call\">\r\n                    <IconButton className={clsx(classes.lightGrayIcons, classes.mr)}>\r\n                        <PhoneOutlined />\r\n                    </IconButton>\r\n                </Tooltip>\r\n\r\n                <Tooltip title=\"Video chat\">\r\n                    <IconButton className={clsx(classes.lightGrayIcons, classes.mr)}>\r\n                        <VideoCallOutlined />\r\n                    </IconButton>\r\n                </Tooltip>\r\n\r\n                <Tooltip title=\"Search in conversation\">\r\n                    <IconButton className={clsx(classes.lightGrayIcons, classes.mr)}>\r\n                        <FindInPageOutlined />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </Box> */}\r\n\r\n            <MyAccordion label=\"About\" isOpen={true}>\r\n                <Box display=\"flex\" flexDirection=\"column\" flexGrow={1}>\r\n                <div className=\"form-group\">\r\n                    <label>Name</label>\r\n                    <MyTextField disabled fullWidth variant=\"outlined\" size=\"small\" value={member?.name} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Title</label>\r\n                    <MyTextField disabled fullWidth variant=\"outlined\" size=\"small\" value={member?.title || 'Not mention'} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Email</label>\r\n                    <MyTextField disabled fullWidth variant=\"outlined\" size=\"small\" value={member?.email} />\r\n                </div>\r\n                </Box>\r\n            </MyAccordion>\r\n            <MyAccordion label=\"View photos and videos\" >\r\n                you will find all sent media in here\r\n            </MyAccordion>\r\n            <MyAccordion label=\"File Attachment\">\r\n                you will find all sent media in here\r\n            </MyAccordion>\r\n            <MyAccordion label=\"Calls History\" >\r\n                List of peviews calls is here\r\n            </MyAccordion>\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ChatDetails;\r\n","export default __webpack_public_path__ + \"static/media/bg1.9e4de1d1.svg\";","import React, { useRef, useEffect } from 'react';\r\nimport {\r\n    Box,\r\n    makeStyles,\r\n    Theme,\r\n    Avatar,\r\n    Typography,\r\n    IconButton,\r\n    InputBase,\r\n    Tooltip,\r\n    Divider\r\n} from '@material-ui/core';\r\nimport {\r\n    InfoOutlined,\r\n    CropOriginal,\r\n    AttachFile,\r\n    SendOutlined,\r\n    SentimentVerySatisfiedOutlined,\r\n    PhoneOutlined,\r\n    VideoCallOutlined,\r\n    ArrowDropDownCircleOutlined,\r\n    Comment\r\n} from '@material-ui/icons';\r\nimport { Picker } from 'emoji-mart';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState, MessageModel, UserModel } from '../../../models/app.model';\r\nimport { useSharedContext } from '../../../context';\r\nimport { useSocketContext } from '../../../context/SocketContext';\r\nimport { PostNewMessage, setChat } from '../../../store/actions/chat.actions';\r\nimport useToggle from '../../../hooks/useToggle';\r\nimport useSidenav from '../../../hooks/useSidenav';\r\nimport ChatDetails from './ChatDetails';\r\nimport clsx from 'clsx';\r\nimport bgImage from '../../../assets/chat/bg1.svg';\r\nimport userAvatar from '../../../assets/avatars/profile.jpg';\r\nimport axios from \"axios\";\r\nimport Moment from 'react-moment';\r\nimport useMutation from '../../../hooks/useMutation';\r\n\r\nimport \"./chat.css\";\r\nimport { useVideoCallContext } from './VideoCallContext';\r\nimport { isMemberConnected } from '../../../util/helpers';\r\nimport { useNotificationContext } from '../../../context/NotificationContext';\r\n\r\nconst baseURL = process.env.REACT_APP_BASE_URL;\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        height: 'calc(100vh - 56px)',\r\n        position: \"relative\",\r\n        display: 'flex',\r\n        flexDirection: \"column\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundImage: `url(${bgImage})`,\r\n        backgroundAttachment: 'fixed',\r\n        backgroundSize: 'cover',\r\n        width: '100%',\r\n        overflow: 'hidden'\r\n    },\r\n    iconColor: {\r\n        color: '#64748B'\r\n    },\r\n    mr: {\r\n        marginRight: theme.spacing(0.5)\r\n    },\r\n    bgLightBlue: {\r\n        backgroundColor: \"#f1f5f9\"\r\n    },\r\n    fileAttachment: {\r\n        cursor: \"pointer\",\r\n        color: '#fff !important',\r\n        padding: \"8px 15px\",\r\n        marginBottom: '5px',\r\n        marginTop: '5px',\r\n    },\r\n    downloadLink: {\r\n        '&:hover': {\r\n            textDecoration: 'none !important',\r\n        }\r\n    }\r\n}));\r\n\r\nconst Chat = (props: any) => {\r\n    const classes = useStyles();\r\n    const memberId = props.match.params.memberId;\r\n\r\n    return (\r\n        <Box className={classes.root}>\r\n\r\n            <Box height=\"70px\" boxShadow=\"0 .125rem .25rem rgba(0,0,0,.075)\" p={2} display='flex' flexDirection=\"row\" className=\"bg-white\"\r\n                alignItems=\"center\" justifyContent=\"space-between\">\r\n                <ChatHeader memberId={memberId} />\r\n            </Box>\r\n\r\n            <Box flexGrow={1} p={2} display=\"flex\" flexDirection=\"Column\" overflow=\"auto\"\r\n                className=\"content-scroll\">\r\n                <Messages memberId={memberId} />\r\n            </Box>\r\n\r\n            <Box style={{ padding: '0.5rem 1rem' }} position=\"sticky\" bottom={0} >\r\n                <MessageEditor memberId={memberId} />\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst ChatHeader = ({ memberId }: { memberId: string }) => {\r\n    const member = useSelector((state: AppState) => state.members)\r\n        .find((item: UserModel) => item._id === memberId);\r\n    const { onlineUsers } = useSocketContext();\r\n\r\n    useEffect(() => {\r\n        if(member){\r\n            sessionStorage.setItem('userToCall', JSON.stringify(member));\r\n        }\r\n    }, [memberId]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" justifyContent=\"start\">\r\n                {member && <Avatar src={member.avatar ? `${baseURL}/files/${member.avatar}` : userAvatar} alt=\"receptor\" />}\r\n                <Box display=\"flex\" flexDirection=\"column\" ml={1}>\r\n                    <Typography variant=\"subtitle2\" className=\"bg-text-primary\">\r\n                        {member?.name}\r\n                    </Typography>\r\n                    <small className=\"bg-text-secondary\">\r\n                        {\r\n                            member?._id &&\r\n                                onlineUsers.hasOwnProperty(member._id) ?\r\n                                onlineUsers[member._id].lastSeen ? (\r\n                                    <Moment fromNow>{onlineUsers[member._id].lastSeen}</Moment>\r\n                                ) : 'Active Now' : 'long time ago'\r\n                        }\r\n                    </small>\r\n                </Box>\r\n            </Box>\r\n            <Box>\r\n                <ChatDetailsDialog member={member} />\r\n            </Box>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst MessageEditor = ({ memberId }: { memberId: string }) => {\r\n    const classes = useStyles();\r\n    const [text, setText] = React.useState<string>('');\r\n    const { show, toggle: toggleImoji } = useToggle();\r\n    const { currentUser, selectedWorkspace, dispatch } = useSharedContext();\r\n    const { onCallStart } = useVideoCallContext();\r\n    const { sendMessage, onlineUsers } = useSocketContext();\r\n    const { showMsg } = useNotificationContext();\r\n    const { onMutate } = useMutation();\r\n\r\n    let fileRef = useRef<any>();\r\n    let imageRef = useRef<any>();\r\n\r\n    function displayEmoji(emoji: any) {\r\n        setText((state: string) => state.trim() + ' ' + emoji.native)\r\n        toggleImoji();\r\n    }\r\n\r\n    function handleTextChange(e: any) {\r\n        setText(e.target.value);\r\n    }\r\n\r\n    async function onSubmitHandler() {\r\n        try {\r\n            const obj: MessageModel = {\r\n                text,\r\n                members: [memberId, currentUser._id || ''],\r\n                workspace: selectedWorkspace || '',\r\n                sender: currentUser._id || '',\r\n                sentAt: new Date()\r\n            };\r\n            const { data } = await axios.post('/messages', obj);\r\n            if (data.success) {\r\n                setText('');\r\n                dispatch(PostNewMessage(data.data, memberId));\r\n                sendMessage(selectedWorkspace, memberId, data.data)\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    async function audioCallHandler(){\r\n        try{\r\n            const isMemberAvailable = isMemberConnected(memberId, onlineUsers);\r\n            if(!isMemberAvailable){\r\n                showMsg('Member is not available right now, call him later', 'warning');\r\n            }\r\n            else{\r\n                onCallStart('dial', false);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    async function videoCallHandler(){\r\n        try{\r\n            const isMemberAvailable = isMemberConnected(memberId, onlineUsers);\r\n            if(!isMemberAvailable){\r\n                showMsg('Member is not available right now, call him later', 'warning');\r\n            }\r\n            else{\r\n                onCallStart('dial', true);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    async function handleImagesChange(e: any) {\r\n        try {\r\n            const result = window.confirm(`image(s) have been selected, confirm to send!`);\r\n            if (result) {\r\n                const fd = new FormData();\r\n                for (let file of e.target.files) {\r\n                    fd.append('pictures', file);\r\n                }\r\n                const res = await onMutate({\r\n                    url: `/files/pictures/${selectedWorkspace}/${memberId}`,\r\n                    method: 'PATCH',\r\n                    data: fd\r\n                });\r\n                if (res.success) {\r\n                    dispatch(PostNewMessage(res.data, memberId));\r\n                }\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    async function handlefileChange(e: any) {\r\n        try {\r\n            const result = window.confirm(`file(s) have been selected, confirm to send!`);\r\n            if (result) {\r\n                const fd = new FormData();\r\n                fd.append('file', e.target.files[0]);\r\n                const res = await onMutate({\r\n                    url: `/files/attachment/${selectedWorkspace}/${memberId}`,\r\n                    method: 'PATCH',\r\n                    data: fd\r\n                });\r\n                if (res.success) {\r\n                    dispatch(PostNewMessage(res.data, memberId));\r\n                }\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box borderRadius={5} border=\"1px solid lightgray\" overflow=\"hidden\" className=\"bg-white\">\r\n            <Box p={1}>\r\n                <InputBase\r\n                    onChange={handleTextChange}\r\n                    value={text}\r\n                    multiline\r\n                    maxRows={3}\r\n                    fullWidth\r\n                    placeholder=\"enter your message right here..\"\r\n                    inputProps={{ 'aria-label': 'naked' }} />\r\n            </Box>\r\n            <Box className={classes.bgLightBlue} borderTop=\"1px solid lightgray\" p={1} display=\"flex\" flexDirection=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                <div>\r\n                    {show && <Picker set='twitter' onSelect={(emoji) => displayEmoji(emoji)}\r\n                        style={{ position: 'absolute', bottom: '60px', left: '1.5rem', zIndex: 99999, width: '280px' }} />\r\n                    }\r\n\r\n                    <IconButton className={classes.mr} size=\"small\" onClick={toggleImoji}>\r\n                        <SentimentVerySatisfiedOutlined className={classes.iconColor} />\r\n                    </IconButton>\r\n\r\n                    <React.Fragment>\r\n                        <Tooltip title=\"send images\">\r\n                            <IconButton className={classes.mr} size=\"small\" onClick={() => imageRef.current.click()}>\r\n                                <CropOriginal className={classes.iconColor} />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <input onChange={handleImagesChange} ref={imageRef} name=\"pictures\"\r\n                            hidden multiple accept=\"image/*\" type=\"file\" />\r\n                    </React.Fragment>\r\n\r\n                    <React.Fragment>\r\n                        <Tooltip title=\"send attachment\">\r\n                            <IconButton className={classes.mr} size=\"small\" onClick={() => fileRef.current.click()}>\r\n                                <AttachFile className={classes.iconColor} />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <input onChange={handlefileChange} ref={fileRef} hidden type=\"file\" name=\"file\"\r\n                            accept=\".xlsx,.xls,.doc, .docx,.ppt, .pptx,.txt,.pdf\" />\r\n                    </React.Fragment>\r\n                </div>\r\n                <div style={{ display: 'flex' }}>\r\n                    <Tooltip title=\"audio call\">\r\n                        <IconButton className={classes.mr} size=\"small\" onClick={audioCallHandler}>\r\n                            <PhoneOutlined className={classes.iconColor} />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"video call\">\r\n                        <IconButton size=\"small\" onClick={videoCallHandler}>\r\n                            <VideoCallOutlined className={classes.iconColor} />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Divider orientation=\"vertical\" flexItem style={{ margin: '0 0.6rem', width: '2px' }} />\r\n                    <Tooltip title=\"send\">\r\n                        <span>\r\n                            <IconButton size=\"small\" disabled={text === ''}\r\n                                onClick={onSubmitHandler}>\r\n                                <SendOutlined className={classes.iconColor} />\r\n                            </IconButton>\r\n                        </span>\r\n                    </Tooltip>\r\n                </div>\r\n            </Box>\r\n        </Box>\r\n    )\r\n};\r\n\r\nconst Messages = ({ memberId }: { memberId: string }) => {\r\n\r\n    const chat = useSelector((state: AppState) => state.chat);\r\n    const [messages, setMessages] = React.useState<MessageModel[]>(chat[memberId] || []);\r\n\r\n    const messageRef = useRef<HTMLDivElement>(null);\r\n    const { selectedWorkspace, currentUser, dispatch } = useSharedContext();\r\n\r\n    useEffect(() => {\r\n        messageRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const { data } = await axios.get(`/messages/${selectedWorkspace}/${memberId}`);\r\n                if (data.success) {\r\n                    dispatch(setChat(data.data, memberId));\r\n                    setMessages(data.data);\r\n                }\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n\r\n        if (!chat.hasOwnProperty(memberId)) {\r\n            fetchMessages();\r\n        }\r\n        else {\r\n            setMessages(chat[memberId]);\r\n        }\r\n    }, [memberId, chat]);\r\n\r\n    if (messages.length === 0) {\r\n        return (\r\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\" height=\"100%\">\r\n                <Comment style={{ color: '#9e9e9e', fontSize: 60 }} />\r\n                <Typography variant=\"h6\" component=\"span\" style={{ color: '#9e9e9e' }} gutterBottom>\r\n                    Start A new Conversation\r\n                </Typography>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                messages.map((item: MessageModel, index: number) => (\r\n                    <div key={item._id} ref={messageRef}>\r\n                        <Message message={item} myId={currentUser._id || ''}\r\n                            last={messages.length === (index + 1)} />\r\n                    </div>\r\n                ))\r\n            }\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst FileAttachment = ({ message, mine }: { message: MessageModel, mine: boolean }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Tooltip title=\"download\">\r\n            <a className={classes.downloadLink} target=\"_blank\" href={`${baseURL}/files/${message.file}`} download={message.file}>\r\n                <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" maxWidth=\"280px\"\r\n                    borderRadius={20} className={clsx(classes.fileAttachment, {\r\n                        'my-attachment': mine,\r\n                        'your-attachment': !mine\r\n                    })}>\r\n                    <ArrowDropDownCircleOutlined />\r\n                    <Box mx={1}>\r\n                        <Typography variant=\"subtitle2\"> Click to download</Typography>\r\n                        <small >Sent At: &nbsp;\r\n                            <Moment format=\"DD/MM/YYYY\">\r\n                                {message?.sentAt}\r\n                            </Moment>\r\n                        </small>\r\n                    </Box>\r\n                </Box>\r\n            </a>\r\n        </Tooltip>\r\n    )\r\n}\r\n\r\nconst ImagesGrid = ({ pictures }: { pictures: string[] }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className=\"gallery\">\r\n            {\r\n                pictures.map((item, index) => (\r\n                    <figure key={`pic${index}`} className={`gallery_item${index}`}>\r\n                        <a href={`${baseURL}/files/${item}`} download target=\"_blank\">\r\n                            <img src={`${baseURL}/files/${item}`} alt={`pic${index}`} />\r\n                        </a>\r\n                    </figure>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nconst Message = ({ message, myId, last }: { message: MessageModel, myId: string, last: boolean }) => {\r\n    const { show, toggle } = useToggle();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                message.sender === myId ? (\r\n                    <div className=\"messages mine\">\r\n                        {\r\n                            message.text && (\r\n                                <>\r\n                                    <div className={clsx('message', { 'last': last })} onClick={toggle}>\r\n                                        {message.text}\r\n                                    </div>\r\n                                    {last && <small style={{ marginRight: '0.5rem' }} className=\"bg-text-secondary\">\r\n                                        <Moment fromNow>\r\n                                            {message.sentAt}\r\n                                        </Moment>\r\n                                    </small>}\r\n                                    {!last && show && <small style={{ marginRight: '0.5rem' }} className=\"bg-text-secondary\">\r\n                                        <Moment fromNow>\r\n                                            {message.sentAt}\r\n                                        </Moment>\r\n                                    </small>}\r\n                                </>\r\n                            )\r\n                        }\r\n                        {\r\n                            message.file && (\r\n                                <FileAttachment message={message} mine={true} />\r\n                            )\r\n                        }\r\n                        {\r\n                            message.pictures && (\r\n                                <ImagesGrid pictures={message.pictures} />\r\n                            )\r\n                        }\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"messages yours\">\r\n                        {\r\n                            message.text && (\r\n                                <>\r\n                                    <div className={clsx('message', { 'last': last })} onClick={toggle}>\r\n                                        {message.text}\r\n                                    </div>\r\n                                    {last && <small style={{ marginRight: '0.5rem' }} className=\"bg-text-secondary\">\r\n                                        <Moment fromNow>\r\n                                            {message.sentAt}\r\n                                        </Moment>\r\n                                    </small>}\r\n                                    {!last && show && <small style={{ marginRight: '0.5rem' }} className=\"bg-text-secondary\">\r\n                                        <Moment fromNow>\r\n                                            {message.sentAt}\r\n                                        </Moment>\r\n                                    </small>}\r\n                                </>\r\n                            )\r\n                        }\r\n                        {\r\n                            message.file && (\r\n                                <FileAttachment message={message} mine={false} />\r\n                            )\r\n                        }\r\n                        {\r\n                            message.pictures && (\r\n                                <ImagesGrid pictures={message.pictures} />\r\n                            )\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\ninterface ChatDetailsProps {\r\n    member: UserModel | undefined;\r\n}\r\nconst ChatDetailsDialog: React.FC<ChatDetailsProps> = ({ member }) => {\r\n    const classes = useStyles();\r\n    const { SidenavComponent, onSidenavClose, onSidenavOpen } = useSidenav('right', 'persistent');\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <IconButton onClick={onSidenavOpen}>\r\n                <InfoOutlined className={classes.iconColor} />\r\n            </IconButton>\r\n\r\n            <SidenavComponent>\r\n                <div style={{ overflowY: 'auto', height: 'calc(100% - 56px)', marginTop: '56px' }}>\r\n                    <ChatDetails onSidenavClose={onSidenavClose} member={member} />\r\n                </div>\r\n            </SidenavComponent>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Chat;\r\n"],"sourceRoot":""}