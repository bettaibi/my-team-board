{"version":3,"sources":["hooks/useSidenav/index.tsx","hooks/useConfirmDialog/index.tsx","pages/Team/Board/Scrumboard/Sprint/CardDetails.tsx","pages/Team/Board/Scrumboard/Sprint/NewSprint.tsx","pages/Team/Board/Scrumboard/Sprint/index.tsx","pages/Team/Board/Scrumboard/Aspect/EditAspect/index.tsx","pages/Team/Board/Scrumboard/Aspect/NewAspect/index.tsx","pages/Team/Board/Scrumboard/Aspect/index.tsx","pages/Team/Board/Scrumboard/EditProject.tsx","pages/Team/Board/Scrumboard/index.tsx"],"names":["useStyles","makeStyles","theme","drawerOpen","breakpoints","down","width","drawerClose","useSidenav","anchor","variant","state","classes","useToggle","onSidenavClose","handleClose","onSidenavOpen","handleOpen","show","onSidenavToggle","toggle","SidenavComponent","children","transitionDuration","enter","exit","open","onClose","className","clsx","paper","overflow","useConfirmDialog","obj","message","onConfirmClick","ConfirmDialog","useCallback","maxWidth","dividers","style","padding","size","onClick","color","schema","yup","shape","title","required","checklistSchema","description","useStyle","root","minWidth","height","content","checklist","boxShadow","backgroundColor","palette","common","white","borderRadius","border","marginTop","spacing","display","flexDirection","alignItems","todo","flexGrow","fontSize","textDecoration","iconColor","CheckList","list","setList","countDone","array","s","done","some","percentage","length","Math","trunc","Fragment","LinearProgress","value","marginBottom","Typography","align","droppableId","provided","ref","innerRef","droppableProps","map","item","index","draggableId","providedDraggable","draggableProps","dragHandleProps","Checkbox","checked","onChange","e","event","order","target","inputProps","IconButton","DragHandleOutlined","placeholder","NewCheckList","usePopover","PopoverComponent","handleClick","a","err","console","error","Tooltip","aria-describedby","AddCircleOutline","id","Box","p","validationSchema","initialValues","onSubmit","values","onSubmitHandler","handleSubmit","handleBlur","handleChange","touched","errors","MyTextField","fullWidth","name","onBlur","multiline","rows","helperText","Button","type","CardMenu","currentSprint","projectId","members","closeMenu","onMutate","useMutation","useSharedContext","dispatch","selectedWorkspace","url","_id","method","data","workspace","success","setTimeout","deleteSprint","MoreHorizOutlined","MenuItem","CardDetails","onDialogClose","sprint","React","useState","tasks","loading","defaultValue","dueDate","Date","ondragend","result","source","destination","editSprint","autoComplete","borderBottom","justifyContent","RoundedButton","marginRight","disableElevation","mb","onDragEnd","NewSprint","aspect","project","res","newSprint","mr","card","cursor","addCardButton","Sprint","numberOfDone","useDialog","DialogComponent","onDialogOpen","component","substr","mt","format","Chip","icon","CheckBoxOutlined","label","NewSprintContainer","UsePopover","EditAspect","currentAspect","editAspect","NewAspect","newAspect","aspectTitle","Aspect","Badge","badgeContent","cards","MoreVertOutlined","DeleteAspectContainer","deleteAspect","DeleteOutline","marginLeft","EditAspectContainer","NewAspectContainer","Add","DeleteProjectButton","deleteProject","deleteBoard","EditProject","selectedMembers","useSelector","setMembers","currentUser","isOwner","owner","InitialValue","updateProject","editBoard","submitHandler","disabled","gutterBottom","Autocomplete","newValue","newValues","multiple","limitTags","clearOnBlur","options","getOptionLabel","option","renderTags","getTagProps","avatar","Avatar","alt","src","process","userAvatar","renderInput","params","header","gap","EditProjectDialog","isDisabled","EditOutlined","overflowY","Scrumboard","props","history","useHistory","match","boards","board","log","useEffect","fetchBoard","axios","get","newBoard","projectMembers","hasOwnProperty","goBack","AppsOutlined","aspects"],"mappings":"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","file":"static/js/18.0851782c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\nimport useToggle from '../useToggle';\r\nimport { Box } from '@material-ui/core';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\n\r\ntype Anchors = 'left' | 'right' | 'top' | 'bottom';\r\ntype Variant = 'temporary' | 'permanent' | 'persistent';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n\r\n    drawerOpen: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            width: '100%'\r\n        },\r\n        width: '40%',\r\n    },\r\n    drawerClose: {\r\n        width: 0,\r\n    },\r\n}));\r\n\r\nconst useSidenav = (anchor: Anchors, variant: Variant, state?: boolean) => {\r\n    const classes = useStyles();\r\n    const { handleClose: onSidenavClose, handleOpen: onSidenavOpen, show, toggle: onSidenavToggle } = useToggle(state || false);\r\n\r\n    const SidenavComponent: React.FC = ({ children }) => {\r\n\r\n        return (\r\n            <Drawer\r\n            transitionDuration={{ enter: 500, exit: 1000 }}\r\n                variant={variant}\r\n                anchor={anchor}\r\n                open={show}\r\n                onClose={onSidenavClose}\r\n                className={clsx({\r\n                    [classes.drawerOpen]: show,\r\n                    [classes.drawerClose]: !show,\r\n                  })}\r\n                classes={{\r\n                    paper: clsx({\r\n                      [classes.drawerOpen]: show,\r\n                      [classes.drawerClose]: !show,\r\n                    }),\r\n                  }} >\r\n                <Box overflow=\"hidden\">\r\n                    {children}\r\n                </Box>\r\n            </Drawer>\r\n        )\r\n    };\r\n\r\n    return {\r\n        onSidenavClose,\r\n        onSidenavOpen,\r\n        onSidenavToggle,\r\n        SidenavComponent,\r\n        show\r\n    };\r\n\r\n};\r\n\r\nexport default useSidenav;","import { useCallback } from 'react';\r\nimport {\r\n    Typography,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    Button\r\n} from '@material-ui/core';\r\nimport useToggle from '../useToggle';\r\n\r\ninterface ConfirmDialogProps {\r\n    message: string;\r\n    onConfirmClick: () => void;\r\n}\r\nconst useConfirmDialog = (obj: ConfirmDialogProps) => {\r\n    const { show, handleClose, handleOpen } = useToggle();\r\n    const { message, onConfirmClick } = obj;\r\n\r\n    const ConfirmDialog = useCallback(() => (\r\n        <Dialog open={show} onClose={handleClose} maxWidth=\"xs\">\r\n            <DialogContent dividers style={{padding: '1.2rem 1rem'}}>\r\n                <Typography variant=\"h6\" >\r\n                    Confirm\r\n                </Typography>\r\n                <span>\r\n                    {message}\r\n                </span>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button size=\"small\" onClick={handleClose}>Close</Button>\r\n                <Button size=\"small\" variant=\"contained\" color=\"primary\"\r\n                    onClick={onConfirmClick}>Confirm</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ), [show, message, handleClose, onConfirmClick]);\r\n\r\n    return {\r\n        handleClose,\r\n        handleOpen,\r\n        ConfirmDialog\r\n    }\r\n};\r\n\r\nexport default useConfirmDialog;","import React from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    LinearProgress,\r\n    Typography,\r\n    IconButton,\r\n    MenuItem,\r\n    Tooltip,\r\n    Checkbox,\r\n    makeStyles\r\n} from '@material-ui/core';\r\nimport {\r\n    MoreHorizOutlined,\r\n    AddCircleOutline,\r\n    DragHandleOutlined\r\n} from '@material-ui/icons';\r\nimport { Formik, Form } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nimport MyTextField from '../../../../../components/MyTextField';\r\nimport RoundedButton from '../../../../../components/RoundedButton';\r\nimport usePopover from '../../../../../hooks/usePopover';\r\nimport clsx from 'clsx';\r\nimport { DropResult, DragDropContext, Droppable, Draggable, DroppableProvided, DraggableProvided } from \"react-beautiful-dnd\";\r\nimport { SprintModel, TaskModel } from '../../../../../models/app.model';\r\nimport useMutation from '../../../../../hooks/useMutation';\r\nimport useConfirmDialog from '../../../../../hooks/useConfirmDialog';\r\nimport { useSharedContext } from '../../../../../context';\r\nimport { deleteSprint, editSprint } from '../../../../../store/actions/board.actions';\r\n\r\n\r\nconst schema = yup.object().shape({\r\n    title: yup.string().required('Title is required'),\r\n});\r\n\r\nconst checklistSchema = yup.object().shape({\r\n    description: yup.string().required('task description is required'),\r\n});\r\n\r\nfunction some(array: TaskModel[]): number{\r\n    let s = 0;\r\n    for(let item of array){\r\n        if(item.done){ s++; }\r\n    }\r\n    return s;\r\n}\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    root: {\r\n        overflow: 'hidden',\r\n        minWidth: \"540px\",\r\n        height: '64px',\r\n        [theme.breakpoints.down('xs')]: {\r\n            minWidth: \"100%\"\r\n        },\r\n    },\r\n    content: {\r\n        overflow: \"auto\",\r\n        height: \"520px\",\r\n        [theme.breakpoints.down('xs')]: {\r\n            height: 'calc(100vh - 64px)',\r\n        }\r\n    },\r\n    checklist: {\r\n        boxShadow: '0 1px 2px 0 #0000000d',\r\n        backgroundColor: theme.palette.common.white,\r\n        borderRadius: 4,\r\n        border: '1px solid #ced4da',\r\n        marginTop: theme.spacing(1),\r\n        padding: '0.4rem 0',\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\"\r\n    },\r\n    todo: {\r\n        color: '#333',\r\n        flexGrow: 1,\r\n        fontSize: '14px',\r\n        [theme.breakpoints.down('xs')]: {\r\n            fontSize: '13px'\r\n        },\r\n        '&.done': {\r\n            textDecoration: 'line-through'\r\n        }\r\n    },\r\n    iconColor: {\r\n        color: '#64748B'\r\n    },\r\n}));\r\n\r\ninterface CardDetailsProps {\r\n    onDialogClose: () => void;\r\n    sprint: SprintModel,\r\n    projectId: string;\r\n    members: string[]\r\n}\r\nconst CardDetails: React.FC<CardDetailsProps> = ({ onDialogClose, sprint, projectId, members }) => {\r\n    const classes = useStyle();\r\n    const [list, setList] = React.useState<TaskModel[]>(sprint.tasks || []);\r\n    const { onMutate, loading } = useMutation();\r\n    const { dispatch, selectedWorkspace} = useSharedContext();\r\n\r\n    const defaultValue = {\r\n        ...sprint,\r\n        dueDate: sprint.dueDate || new Date()\r\n    };\r\n\r\n    const ondragend = (result: DropResult) => {\r\n        const { source, destination } = result;\r\n    };\r\n\r\n    async function onSubmitHandler(values: SprintModel) {\r\n        try {\r\n            const obj = {\r\n                ...sprint,\r\n                ...values,\r\n                tasks: list\r\n            };\r\n            const res = await onMutate({\r\n                url: `/sprint/${sprint._id}`,\r\n                method: 'PUT',\r\n                data: {\r\n                    sprint: obj,\r\n                    workspace: selectedWorkspace,\r\n                    projectId: projectId,\r\n                    members\r\n                }\r\n            });\r\n            if(res.success){\r\n                onDialogClose();\r\n\r\n                setTimeout(()=> {\r\n                    dispatch(editSprint(projectId, obj));\r\n                },0);\r\n            }\r\n        }\r\n        catch (err) {\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Formik initialValues={defaultValue} validationSchema={schema} onSubmit={(values) => onSubmitHandler(values)}>\r\n            {\r\n                ({ handleSubmit, handleBlur, handleChange, errors, touched, values }) => (\r\n                    <Form onSubmit={handleSubmit} autoComplete='off'>\r\n                        <Box p={2} borderBottom=\"1px solid lightgray\" className={classes.root}\r\n                            display=\"flex\" flexDirection=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                            <div>\r\n                                <CardMenu members={members} currentSprint={sprint} projectId = {projectId} />\r\n                            </div>\r\n\r\n                            <div>\r\n                                <RoundedButton variant=\"outlined\" className={classes.iconColor} size=\"medium\"\r\n                                    onClick={onDialogClose} style={{ marginRight: '0.5rem' }}>Cancel</RoundedButton>\r\n                                <RoundedButton disableElevation variant=\"contained\" color=\"primary\" size=\"medium\" type=\"submit\">{loading ? 'Loading...' : 'Save'}</RoundedButton>\r\n                            </div>\r\n                        </Box>\r\n\r\n                        <Box p={2} className={clsx('content-scroll', classes.content)} >\r\n                            <div className=\"form-group\">\r\n                                <label>Title *</label>\r\n                                <MyTextField name=\"title\" size=\"small\" fullWidth placeholder=\"Card title\"\r\n                                    variant=\"outlined\"\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.title}\r\n                                    error={touched.title && !!errors.title}\r\n                                    helperText={touched.title && errors.title}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Description</label>\r\n                                <MyTextField name=\"description\" size=\"small\" fullWidth placeholder=\"Description\"\r\n                                    variant=\"outlined\"\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    multiline\r\n                                    rows={3}\r\n                                    value={values.description}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Due Date</label>\r\n                                <MyTextField name=\"dueDate\" size=\"small\" fullWidth placeholder=\"Due date\"\r\n                                    type=\"date\"\r\n                                    variant=\"outlined\"\r\n                                    value={values.dueDate}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <Box mb={1} display=\"flex\" flexDirection=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                                    <label>\r\n                                        Checklist items\r\n                                    </label>\r\n                                    <NewCheckList setList={setList} />\r\n                                </Box>\r\n                                <DragDropContext onDragEnd={ondragend}>\r\n                                    <CheckList list={list}  setList={setList} />\r\n                                </DragDropContext>\r\n                            </div>\r\n                        </Box>\r\n                    </Form>\r\n                )\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst CheckList = ({ list, setList }: { list: TaskModel[],  setList: React.Dispatch<React.SetStateAction<TaskModel[]>> }) => {\r\n    const classes = useStyle();\r\n\r\n    let countDone = some(list);\r\n\r\n    let percentage = list.length === 0 ? 0 : Math.trunc((countDone *  100)/ list.length);\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>, order: number) => {\r\n        setList((state: TaskModel[])=> {\r\n            return state.map((item: TaskModel) => {return item.order === order? {\r\n                ...item, done: event.target.checked\r\n            }: item});\r\n        })\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <LinearProgress variant=\"determinate\" value={percentage} style={{ marginBottom: '.25rem' }} />\r\n            <Typography variant=\"body2\" color=\"textSecondary\" align=\"right\">\r\n                {percentage} %\r\n            </Typography>\r\n\r\n            <Droppable droppableId=\"reorderlist\">\r\n                {\r\n                    (provided: DroppableProvided) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            {...provided.droppableProps}>\r\n\r\n                            {\r\n                                list.map((item: TaskModel, index: number) => (\r\n                                    <Draggable key={index + 'ddj'} index={index} draggableId={index + 'item'}>\r\n                                        {\r\n                                            (providedDraggable: DraggableProvided) => (\r\n                                                <div className={classes.checklist}\r\n                                                    ref={providedDraggable.innerRef}\r\n                                                    {...providedDraggable.draggableProps}\r\n                                                    {...providedDraggable.dragHandleProps}>\r\n                                                    <Checkbox\r\n                                                        checked={item.done}\r\n                                                        onChange={(e)=> handleChange(e, item.order)}\r\n                                                        color=\"primary\"\r\n                                                        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                                    />\r\n                                                    <span className={clsx(classes.todo, {\r\n                                                        'done': item.done\r\n                                                    })} >\r\n                                                        {item.description}\r\n                                                    </span>\r\n                                                    <IconButton >\r\n                                                        <DragHandleOutlined />\r\n                                                    </IconButton>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    </Draggable>\r\n                                ))\r\n                            }\r\n\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )\r\n                }\r\n            </Droppable>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst NewCheckList = ({ setList }: { setList: React.Dispatch<React.SetStateAction<TaskModel[]>> }) => {\r\n    const { PopoverComponent, handleClick } = usePopover();\r\n\r\n    const defaultCheckListItem = {\r\n        description: ''\r\n    };\r\n\r\n    async function onSubmitHandler({description}: {description: string}){\r\n        try{\r\n            setList((state: TaskModel[]) => {return [...state, {description, done: false, order: state.length+1}]});\r\n        }\r\n        catch(err){\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title=\"New Item\">\r\n                <IconButton size=\"small\" aria-describedby=\"new_checklist\" onClick={handleClick}>\r\n                    <AddCircleOutline />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <PopoverComponent id=\"new_checklist\">\r\n                <Box p={2}>\r\n                    <Formik validationSchema={checklistSchema} initialValues={defaultCheckListItem}\r\n                        onSubmit={(values) => onSubmitHandler(values)}>\r\n                        {\r\n                            ({ handleSubmit, handleBlur, handleChange, touched, errors, values }) => (\r\n                                <Form onSubmit={handleSubmit}>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Add new item</label>\r\n                                        <MyTextField fullWidth name=\"description\" variant=\"outlined\" size=\"small\" placeholder=\"task description...\"\r\n                                            onChange={handleChange} onBlur={handleBlur}\r\n                                            value={values.description}\r\n                                            multiline\r\n                                            rows={2}\r\n                                            error={touched.description && !!errors.description}\r\n                                            helperText={touched.description && errors.description} />\r\n                                    </div>\r\n                                    <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"small\" fullWidth>Add</Button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n                </Box>\r\n            </PopoverComponent>\r\n        </>\r\n    )\r\n};\r\n\r\nconst CardMenu = ({ currentSprint, projectId, members }: {members: string[], currentSprint: SprintModel, projectId: string }) => {\r\n    const { PopoverComponent, handleClick, handleClose: closeMenu } = usePopover();\r\n    const { ConfirmDialog, handleOpen, handleClose } = useConfirmDialog({\r\n        onConfirmClick: onDelete,\r\n        message: 'Are you sure you want to delete this sprint.',\r\n    });\r\n    const { onMutate } = useMutation();\r\n    const { dispatch, selectedWorkspace } = useSharedContext();\r\n\r\n    async function onDelete() {\r\n        try {\r\n            const res = await onMutate({\r\n                url: `/sprint/${currentSprint._id}`,\r\n                method: 'PATCH',\r\n                data: {\r\n                    projectId,\r\n                    workspace: selectedWorkspace,\r\n                    members\r\n                }\r\n            });\r\n\r\n            if (res.success) {\r\n                handleClose();\r\n                setTimeout(() =>{\r\n                    dispatch(deleteSprint(projectId ,currentSprint));\r\n                },0);\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <IconButton aria-describedby=\"card_menu\" size=\"small\" onClick={handleClick}>\r\n                <MoreHorizOutlined />\r\n            </IconButton>\r\n            <PopoverComponent id=\"card_menu\">\r\n                <MenuItem style={{ padding: '1rem' }} onClick={() => { handleOpen(); closeMenu() }}>\r\n                    Remove Card\r\n                </MenuItem>\r\n            </PopoverComponent>\r\n            <ConfirmDialog />\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default CardDetails;\r\n","import React from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport { Button, Box } from '@material-ui/core';\r\nimport MyTextField from '../../../../../components/MyTextField';\r\n\r\nimport * as yup from 'yup';\r\nimport useMutation from '../../../../../hooks/useMutation';\r\nimport { useSharedContext } from '../../../../../context';\r\nimport { newSprint } from '../../../../../store/actions/board.actions';\r\nimport { AspectModel } from '../../../../../models/app.model';\r\n\r\nconst defaultValue = {\r\n    title: ''\r\n};\r\n\r\nconst schema = yup.object().shape({\r\n    title: yup.string().required('Title is required')\r\n});\r\n\r\nconst NewSprint = ({aspect, handleClose, members}: {members: string[], aspect: AspectModel, handleClose: () => void}) => {\r\n    const { loading, onMutate } = useMutation();\r\n    const { dispatch, selectedWorkspace } = useSharedContext();\r\n\r\n    async function onSubmitHandler({title}: {title: string}){\r\n        try{\r\n            const res = await onMutate({\r\n                url: '/sprint',\r\n                method: 'POST',\r\n                data: {\r\n                    sprint: {title, aspect: aspect._id},\r\n                    workspace: selectedWorkspace,\r\n                    projectId: aspect.project,\r\n                    members\r\n                }\r\n            });\r\n\r\n            if(res.success){\r\n               handleClose();\r\n               setTimeout(() => {\r\n                dispatch(newSprint(aspect?.project || '', res.data));\r\n               },0);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Formik initialValues={defaultValue} validationSchema={schema}\r\n                onSubmit={(values) => onSubmitHandler(values)}>\r\n                {\r\n                    ({ handleChange, handleSubmit, handleBlur, values, errors, touched }) => (\r\n\r\n                        <Form onSubmit={handleSubmit} autoComplete=\"off\">\r\n                            <Box p ={2}>\r\n                            <div className=\"form-group\">\r\n                                <label>New Sprint</label>\r\n                                <MyTextField fullWidth variant=\"outlined\" size=\"small\" placeholder=\"title\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange= {handleChange}\r\n                                    name=\"title\"\r\n                                    value={values.title}\r\n                                    error={touched.title && !!errors.title}\r\n                                    helperText={touched.title && errors.title}  />\r\n                            </div>\r\n\r\n                            <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"small\" fullWidth>\r\n                                {loading? 'Loading...':'ADD'}\r\n                            </Button>\r\n                            </Box>\r\n\r\n                        </Form>\r\n                    )\r\n                }\r\n            </Formik>\r\n\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default NewSprint;","import React from 'react';\r\nimport {\r\n    Box,\r\n    Typography,\r\n    makeStyles,\r\n    Chip,\r\n    Button\r\n} from '@material-ui/core';\r\nimport UsePopover from '../../../../../hooks/usePopover';\r\nimport {\r\n    CheckBoxOutlined,\r\n    AddCircleOutline\r\n} from \"@material-ui/icons\";\r\nimport { DraggableProvided } from \"react-beautiful-dnd\";\r\nimport Moment from 'react-moment';\r\nimport useDialog from '../../../../../hooks/useDialog';\r\nimport CardDetails from './CardDetails';\r\nimport NewSprint from './NewSprint';\r\nimport { AspectModel, SprintModel, TaskModel } from '../../../../../models/app.model';\r\n\r\nfunction some(array: TaskModel[]): number{\r\n    let s = 0;\r\n    for(let item of array){\r\n        if(item.done){ s++; }\r\n    }\r\n    return s;\r\n}\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    iconColor: {\r\n        color: '#64748B'\r\n    },\r\n    mr: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    card: {\r\n        backgroundColor: 'white',\r\n        padding: theme.spacing(2),\r\n        marginTop: theme.spacing(1),\r\n        borderRadius: 10,\r\n        cursor: 'pointer',\r\n        boxShadow: \"rgb(0 0 0 / 20%) 0px 3px 1px -2px, rgb(0 0 0 / 14%) 0px 2px 2px 0px, rgb(0 0 0 / 12%) 0px 1px 5px 0px\"\r\n    },\r\n    addCardButton: {\r\n        marginTop: theme.spacing(1),\r\n        width: '100%',\r\n        borderRadius: 10,\r\n        color: '#64748B',\r\n    }\r\n}));\r\n\r\ninterface CardProps {\r\n    providedDraggable: DraggableProvided;\r\n    value: SprintModel;\r\n    projectId: string;\r\n    members: string[];\r\n}\r\nconst Sprint: React.FC<CardProps> = ({ providedDraggable, value, projectId, members }) => {\r\n    const classes = useStyle();\r\n    const numberOfDone = some(value.tasks || []);\r\n    const { DialogComponent, onDialogClose, onDialogOpen } = useDialog();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={classes.card} onClick={onDialogOpen}\r\n                ref={providedDraggable.innerRef}\r\n                {...providedDraggable.draggableProps}\r\n                {...providedDraggable.dragHandleProps}>\r\n                <Typography variant=\"subtitle1\">\r\n                  {value.title}\r\n                </Typography>\r\n               { value.description && <Typography variant=\"subtitle2\" component=\"p\" color=\"textSecondary\">\r\n                  {value.description.length > 120 ? value.description.substr(0, 120) + '...' : value.description}\r\n                </Typography>}\r\n                <Box mt={1} display=\"flex\" flexDirection=\"row\" alignItems=\"center\" justifyContent=\"space-between\"\r\n                    width=\"100%\">\r\n                   { value.dueDate && <Typography variant=\"body2\" color=\"secondary\" >\r\n                        <Moment format=\"DD/MM/YYYY\">\r\n                            {value.dueDate}\r\n                        </Moment>\r\n                    </Typography> }\r\n                    {\r\n                        value?.tasks && value?.tasks.length > 0 &&\r\n                        <Chip\r\n                            size=\"small\"\r\n                            icon={<CheckBoxOutlined />}\r\n                            label={`${numberOfDone} / ${value.tasks.length}`}\r\n                            color=\"primary\"\r\n                         />\r\n                    }\r\n                </Box>\r\n            </div>\r\n\r\n            <DialogComponent>\r\n                <CardDetails members={members} onDialogClose={onDialogClose} sprint = {value} projectId= {projectId} />\r\n            </DialogComponent>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst NewSprintContainer = ({aspect, members}: {aspect: AspectModel, members: string[]}) => {\r\n    const classes = useStyle();\r\n    const { PopoverComponent, handleClick, handleClose} = UsePopover();\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <Button aria-describedby=\"new_sprint_menu\"  onClick={handleClick}\r\n             className={classes.addCardButton} size=\"small\">\r\n                <AddCircleOutline className={classes.mr} />\r\n                <span>Add A NEW sprint</span>\r\n            </Button>\r\n\r\n            <PopoverComponent id=\"new_sprint_menu\">\r\n                <NewSprint aspect = {aspect} handleClose = {handleClose} members={members} />\r\n            </PopoverComponent>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\n\r\nexport { Sprint, NewSprintContainer };","import React from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport { Button, Box } from '@material-ui/core';\r\nimport MyTextField from '../../../../../../components/MyTextField';\r\n\r\nimport * as yup from 'yup';\r\nimport useMutation from '../../../../../../hooks/useMutation';\r\nimport { useSharedContext } from '../../../../../../context';\r\nimport { AspectModel } from '../../../../../../models/app.model';\r\nimport { editAspect } from '../../../../../../store/actions/board.actions';\r\n\r\nconst schema = yup.object().shape({\r\n    title: yup.string().required('Title is required')\r\n});\r\n\r\nconst EditAspect = ({currentAspect, id, handleClose, members}: {members: string[], currentAspect: AspectModel, id: string, handleClose: () => void}) => {\r\n    const { loading, onMutate } = useMutation();\r\n    const {dispatch, selectedWorkspace} = useSharedContext();\r\n\r\n    const defaultValue = {\r\n        title: currentAspect.title,\r\n    };\r\n\r\n    async function onSubmitHandler({title}: {title: string}){\r\n        try{\r\n            const res = await onMutate({\r\n                url: `/aspects/${id}`,\r\n                method: 'PUT',\r\n                data: {\r\n                    workspace: selectedWorkspace,\r\n                    aspect: {...currentAspect, title},\r\n                    members\r\n                }\r\n            });\r\n\r\n            if(res.success){\r\n              handleClose();\r\n              setTimeout(() =>{\r\n                  dispatch(editAspect(currentAspect.project || '', {...currentAspect, title}));\r\n              },0);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Formik initialValues={defaultValue} validationSchema={schema}\r\n                 onSubmit={(values) => onSubmitHandler(values)}>\r\n                {\r\n                    ({ handleChange, handleSubmit, handleBlur, values, errors, touched }) => (\r\n\r\n                        <Form onSubmit={handleSubmit} autoComplete=\"off\">\r\n                            <Box p ={2}>\r\n                            <div className=\"form-group\">\r\n                                <label>Aspect Title</label>\r\n                                <MyTextField fullWidth variant=\"outlined\" size=\"small\" placeholder=\"title\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange= {handleChange}\r\n                                    name=\"title\"\r\n                                    value={values.title}\r\n                                    error={touched.title && !!errors.title}\r\n                                    helperText={touched.title && errors.title}  />\r\n                            </div>\r\n\r\n                            <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"small\" fullWidth>\r\n                               {loading? 'Loading...':'UPDATE'} \r\n                            </Button>\r\n                            </Box>\r\n\r\n                        </Form>\r\n                    )\r\n                }\r\n            </Formik>\r\n\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default EditAspect","import React from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport { Button, Box } from '@material-ui/core';\r\nimport MyTextField from '../../../../../../components/MyTextField';\r\nimport useMutation from '../../../../../../hooks/useMutation';\r\n\r\nimport * as yup from 'yup';\r\nimport { useSharedContext } from '../../../../../../context';\r\nimport { newAspect } from '../../../../../../store/actions/board.actions';\r\n\r\nconst defaultValue = {\r\n    title: ''\r\n};\r\n\r\nconst schema = yup.object().shape({\r\n    title: yup.string().required('Title is required')\r\n});\r\n\r\nconst NewAspect = ({projectId, handleClose, members}: {members: string[], projectId: string, handleClose: () => void}) => {\r\n    const { loading, onMutate } = useMutation();\r\n    const { dispatch, selectedWorkspace } = useSharedContext();\r\n\r\n    async function onSubmitHandler({title}: {title: string}){\r\n        try{\r\n            const res = await onMutate({\r\n                url: '/aspects',\r\n                method: 'POST',\r\n                data: {\r\n                    aspect: {title, project: projectId},\r\n                    members,\r\n                    workspace: selectedWorkspace\r\n                }\r\n            });\r\n\r\n            if(res.success){\r\n                handleClose();\r\n                setTimeout(()=> {\r\n                    dispatch(newAspect(projectId, res.data));\r\n                },0);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Formik initialValues={defaultValue} validationSchema={schema}\r\n                onSubmit={(values) => onSubmitHandler(values)}>\r\n                {\r\n                    ({ handleChange, handleSubmit, handleBlur, values, errors, touched }) => (\r\n\r\n                        <Form onSubmit={handleSubmit} autoComplete=\"off\">\r\n                            <Box p ={2}>\r\n                            <div className=\"form-group\">\r\n                                <label>New Aspect</label>\r\n                                <MyTextField fullWidth variant=\"outlined\" size=\"small\" placeholder=\"title\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange= {handleChange}\r\n                                    name=\"title\"\r\n                                    value={values.title}\r\n                                    error={touched.title && !!errors.title}\r\n                                    helperText={touched.title && errors.title}  />\r\n                            </div>\r\n\r\n                            <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"small\" fullWidth>\r\n                                {loading? 'Loading...':'ADD'}\r\n                            </Button>\r\n                            </Box>\r\n\r\n                        </Form>\r\n                    )\r\n                }\r\n            </Formik>\r\n\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default NewAspect;","import React from 'react';\r\nimport {\r\n    Box,\r\n    Typography,\r\n    makeStyles,\r\n    IconButton,\r\n    Badge,\r\n    MenuItem\r\n} from '@material-ui/core';\r\nimport UsePopover from '../../../../../hooks/usePopover';\r\nimport {\r\n    MoreVertOutlined,\r\n    DeleteOutline,\r\n    Add\r\n} from \"@material-ui/icons\";\r\nimport { Draggable, DraggableProvided } from \"react-beautiful-dnd\";\r\nimport { Sprint } from '../Sprint';\r\nimport EditAspect from './EditAspect';\r\nimport NewAspect from './NewAspect';\r\nimport useConfirmDialog from '../../../../../hooks/useConfirmDialog';\r\nimport useMutation from '../../../../../hooks/useMutation';\r\nimport { AspectModel } from '../../../../../models/app.model';\r\nimport { useSharedContext } from '../../../../../context';\r\nimport { deleteAspect } from '../../../../../store/actions/board.actions';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    iconColor: {\r\n        color: '#64748B'\r\n    },\r\n    newAspect: {\r\n        color: '#64748B',\r\n        cursor: 'pointer',\r\n        padding: theme.spacing(1),\r\n        display: 'flex',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center'\r\n    },\r\n    mr: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    aspectTitle: {\r\n        cursor: 'pointer',\r\n    }\r\n}));\r\n\r\nconst Aspect = ({aspect, members}: {aspect: AspectModel, members: string[]}) => {\r\n    const { PopoverComponent, handleClick } = UsePopover();\r\n\r\n    return (\r\n        <>\r\n            <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                <EditAspectContainer id={aspect._id || ''} currentAspect={aspect} members = {members} />\r\n\r\n                <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\r\n                    <Badge badgeContent={aspect.cards? aspect.cards.length : 0} color=\"primary\" style={{ marginRight: '1rem' }} />\r\n\r\n                    <IconButton size=\"small\" aria-describedby=\"simple_menu\" onClick={handleClick}>\r\n                        <MoreVertOutlined />\r\n                    </IconButton>\r\n\r\n                    <PopoverComponent id=\"simple_menu\">\r\n                      <DeleteAspectContainer currentAspect = {aspect} members={members} />\r\n                    </PopoverComponent>\r\n\r\n                </Box>\r\n            </Box>\r\n            <React.Fragment>\r\n                {\r\n                  aspect.cards && aspect.cards.map((item: any, index: number) => (\r\n                        <Draggable key={item._id} index={index} draggableId={item._id}>\r\n                            {\r\n                                (providedDraggable: DraggableProvided) => (\r\n                                    <Sprint members={members} value={item} providedDraggable={providedDraggable} projectId = {aspect.project || ''} />\r\n                                )\r\n                            }\r\n                        </Draggable>\r\n                    ))\r\n                }\r\n            </React.Fragment>\r\n        </>\r\n    )\r\n};\r\n\r\nconst DeleteAspectContainer = ({currentAspect, members}: {currentAspect: AspectModel, members: string[]}) => {\r\n    const classes = useStyle();\r\n    const { ConfirmDialog, handleOpen, handleClose } = useConfirmDialog({\r\n        onConfirmClick: onDelete,\r\n        message: 'Are you sure you want to delete this aspect.',\r\n    });\r\n    const { onMutate } = useMutation();\r\n    const {dispatch, selectedWorkspace} = useSharedContext();\r\n\r\n    async function onDelete(){\r\n        try{\r\n            const res = await onMutate({\r\n                url: `/aspects/${currentAspect._id}`,\r\n                method: 'PATCH',\r\n                data: {members, workspace: selectedWorkspace, projectId: currentAspect.project }\r\n            });\r\n            if(res.success){\r\n                handleClose();\r\n\r\n                setTimeout(() =>{\r\n                    dispatch(deleteAspect(currentAspect.project || '', currentAspect._id || ''));\r\n                },0);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MenuItem onClick={handleOpen} style={{ padding: '1rem' }}>\r\n                    <DeleteOutline className={classes.iconColor} />\r\n                    <span style={{ marginLeft: '0.8rem' }}>Delete List</span>\r\n            </MenuItem>\r\n            <ConfirmDialog />\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nconst EditAspectContainer = ({currentAspect, id, members}: {currentAspect: AspectModel, id: string, members: string[]}) => {\r\n    const classes = useStyle();\r\n    const { PopoverComponent, handleClick, handleClose } = UsePopover();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"subtitle2\" aria-describedby=\"edit_aspect_menu\"\r\n                onClick={handleClick} className={classes.aspectTitle}>{currentAspect.title}</Typography>\r\n\r\n            <PopoverComponent id=\"edit_aspect_menu\">\r\n                <EditAspect members={members} currentAspect={currentAspect} id={id} handleClose= {handleClose} />\r\n            </PopoverComponent>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nconst NewAspectContainer = ({projectId, members}: {projectId: string, members: string[]}) => {\r\n    const classes = useStyle();\r\n    const { PopoverComponent, handleClick, handleClose } = UsePopover();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Box aria-describedby=\"new_aspect_menu\" className={classes.newAspect}\r\n                onClick={handleClick} >\r\n                <Add className={classes.mr} />\r\n                <span>NEW ASPECT</span>\r\n            </Box>\r\n\r\n            <PopoverComponent id=\"new_aspect_menu\">\r\n                <NewAspect projectId = {projectId} handleClose = {handleClose} members= {members} />\r\n            </PopoverComponent>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport { Aspect, NewAspectContainer };","import React from 'react';\r\nimport { Formik, Form } from \"formik\";\r\nimport {\r\n    Typography,\r\n    Box,\r\n    Avatar,\r\n    Chip\r\n} from '@material-ui/core';\r\nimport * as yup from \"yup\";\r\nimport { AppState, ProjectModel, UserModel } from '../../../../models/app.model';\r\nimport { useSelector } from 'react-redux';\r\nimport { deleteProject, updateProject } from '../../../../store/actions/project.actions';\r\nimport { useSharedContext } from '../../../../context';\r\nimport { deleteBoard, editBoard } from '../../../../store/actions/board.actions';\r\n\r\nimport useMutation from '../../../../hooks/useMutation';\r\nimport userAvatar from '../../../../assets/avatars/profile.jpg';\r\nimport MyTextField from '../../../../components/MyTextField';\r\nimport useConfirmDialog from '../../../../hooks/useConfirmDialog';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport RoundedButton from '../../../../components/RoundedButton';\r\n\r\nconst baseURL = process.env.REACT_APP_BASE_URL;\r\n\r\nconst schema = yup.object().shape({\r\n    title: yup.string().required('Title is required'),\r\n    description: yup.string().required('Description is required')\r\n});\r\n\r\n\r\ninterface EditProjectProps {\r\n    onSidenavClose: () => void;\r\n    project: ProjectModel;\r\n}\r\nconst EditProject: React.FC<EditProjectProps> = ({ onSidenavClose, project }) => {\r\n    const selectedMembers = useSelector((state: AppState) => state.members);\r\n    const [members, setMembers] = React.useState<string[]>(\r\n        project.members.map((item: UserModel) => item._id || '')\r\n    );\r\n    const { loading, onMutate } = useMutation();\r\n    const { dispatch, currentUser, owner } = useSharedContext();\r\n    let isOwner = (owner === currentUser._id);\r\n\r\n    const InitialValue = {\r\n        title: project.title,\r\n        description: project.description,\r\n        members: project.members,\r\n    };\r\n\r\n    function onEmailSelected(newValues: UserModel[]){\r\n        if(newValues !== null){\r\n            if(newValues.length === 0){\r\n                setMembers([]);\r\n            }\r\n            else{\r\n                setMembers([...newValues.map((item: UserModel) => item._id || '')]);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function submitHandler(values: any){\r\n        try{\r\n            const obj = {\r\n                ...project,\r\n                ...values,\r\n                members\r\n            };\r\n            const res = await onMutate({\r\n                url: `/projects/${project._id}`,\r\n                method: 'PUT',\r\n                data: obj\r\n            });\r\n            if(res.success){\r\n                onSidenavClose();\r\n                setTimeout(() =>{\r\n                    dispatch(updateProject(res.data));\r\n                    dispatch(editBoard(res.data._id, res.data));\r\n                },0);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Formik initialValues={InitialValue} validationSchema={schema} onSubmit={(values) => submitHandler(values)}>\r\n            {\r\n                ({ handleSubmit, handleChange, handleBlur, values, errors, touched }) => (\r\n                    <Form onSubmit={handleSubmit} autoComplete=\"off\" >\r\n                        <Box style={{ backgroundColor: '#f1f5f9', padding: '2.5rem 1rem' }} borderBottom=\"1px solid #fafafa\"\r\n                            display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\r\n\r\n                            <RoundedButton className=\"bg-text-secondary\" onClick={onSidenavClose} variant=\"outlined\" color=\"default\" size=\"medium\" type=\"button\">\r\n                                Cancel\r\n                            </RoundedButton>\r\n\r\n                            <Box>\r\n                                {isOwner && <DeleteProjectButton projectId = {project._id || ''} />}\r\n                                <RoundedButton disabled={members.length===0} disableElevation size=\"medium\" type=\"submit\" style={{ marginLeft: '0.5rem' }} variant=\"contained\" color=\"primary\">\r\n                                  {loading? 'Loading...':'Save'}\r\n                                </RoundedButton>\r\n                            </Box>\r\n                        </Box>\r\n\r\n                        <Box style={{ padding: '1rem 1rem 0 1rem' }}>\r\n                            <Typography variant=\"h6\" gutterBottom>\r\n                                Edit Project\r\n                            </Typography>\r\n                            <div className=\"form-group\">\r\n                                <label>Title</label>\r\n                                <MyTextField fullWidth name=\"title\" variant=\"outlined\" size=\"small\" placeholder=\"project title\"\r\n                                    onChange={handleChange} onBlur={handleBlur}\r\n                                    value={values.title}\r\n                                    error={touched.title && !!errors.title}\r\n                                    helperText={touched.title && errors.title} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Description</label>\r\n                                <MyTextField fullWidth name=\"description\" variant=\"outlined\" size=\"small\" placeholder=\"A short description which explains the project..\"\r\n                                    onChange={handleChange} onBlur={handleBlur}\r\n                                    value={values.description}\r\n                                    multiline\r\n                                    rows={3}\r\n                                    error={touched.description && !!errors.description}\r\n                                    helperText={touched.description && errors.description} />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label>Members</label>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\r\n                                    Only selected members are able to work on this project\r\n                                </Typography>\r\n                                <Autocomplete\r\n                                    onChange={(e, newValue)=> onEmailSelected(newValue)}\r\n                                    multiple\r\n                                    fullWidth\r\n                                    limitTags={2}\r\n                                    clearOnBlur\r\n                                    id=\"multiple-limit-tags\"\r\n                                    options={selectedMembers}\r\n                                    getOptionLabel={(option) => option.name}\r\n                                    defaultValue={[...project.members]}\r\n                                    renderTags={(value, getTagProps) =>\r\n                                        value.map((option, index) => (\r\n                                          <Chip\r\n                                            variant=\"default\"\r\n                                            color='primary'\r\n                                            label={option.name}\r\n                                            avatar={<Avatar alt=\"members\"  src={option.avatar? `${baseURL}/files/${option.avatar}` : userAvatar} />}\r\n                                            {...getTagProps({ index })}\r\n                                          />\r\n                                        ))\r\n                                      }\r\n                                    renderInput={(params) => (\r\n                                        <MyTextField  name=\"members\" variant=\"outlined\" size=\"small\" placeholder=\"Add members to this project\"\r\n                                        {...params} />\r\n                                )}\r\n                              />\r\n                            </div>\r\n\r\n                        </Box>\r\n                    </Form>\r\n                )\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst DeleteProjectButton = ({projectId}: {projectId: string}) => {\r\n    const { ConfirmDialog, handleOpen, handleClose } = useConfirmDialog({\r\n        onConfirmClick: onDelete,\r\n        message: 'Are you sure you want to delete this project, by deleting this project all linked aspects will be deleted.',\r\n    });\r\n    const { dispatch } = useSharedContext();\r\n    const { onMutate } = useMutation();\r\n\r\n    async function onDelete(){\r\n        try{\r\n            const res = await onMutate({\r\n                url: `/projects/${projectId}`,\r\n                method: 'DELETE'\r\n            });\r\n            if(res.success){\r\n                handleClose();\r\n\r\n                setTimeout(() =>{\r\n                    dispatch(deleteProject(projectId));\r\n                    dispatch(deleteBoard(projectId));\r\n                }, 0);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <RoundedButton disableElevation size=\"medium\" style={{ marginLeft: '0.5rem' }} \r\n            variant=\"contained\" color=\"secondary\" onClick={handleOpen}>\r\n                Delete\r\n            </RoundedButton>\r\n\r\n            <ConfirmDialog />\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default EditProject;\r\n","import React, { useEffect } from 'react';\r\nimport {\r\n    Box,\r\n    Typography,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport RoundedButton from '../../../../components/RoundedButton';\r\nimport clsx from 'clsx';\r\nimport {\r\n    AppsOutlined,\r\n    EditOutlined,\r\n} from \"@material-ui/icons\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport {Aspect, NewAspectContainer} from './Aspect';\r\n\r\nimport { DropResult, DragDropContext, Droppable, DroppableProvided } from \"react-beautiful-dnd\";\r\nimport { NewSprintContainer } from './Sprint';\r\nimport { useSharedContext } from '../../../../context';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState, DynamicBoard, ProjectModel, UserModel } from '../../../../models/app.model';\r\nimport { newBoard } from '../../../../store/actions/board.actions';\r\n\r\nimport useSidenav from '../../../../hooks/useSidenav';\r\nimport EditProject from './EditProject';\r\nimport axios from 'axios';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    root: {\r\n        height: 'calc(100vh - 56px )',\r\n        overflow: 'hidden'\r\n    },\r\n    header: {\r\n        padding: '1.5rem 1rem',\r\n        borderBottom: \"1px solid lightgray\",\r\n        [theme.breakpoints.down('xs')]: {\r\n            flexDirection: 'column',\r\n            gap: '0.5rem',\r\n        },\r\n    },\r\n    iconColor: {\r\n        color: '#64748B'\r\n    },\r\n    mr: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    aspect: {\r\n        backgroundColor: '#e6ebf1',\r\n        padding: theme.spacing(1),\r\n        borderRadius: 10,\r\n        width: '288px',\r\n        minWidth: '288px',\r\n        marginRight: '1rem',\r\n        height: 'fit-content',\r\n        '&:last-child': {\r\n            marginRight: 0,\r\n        }\r\n    }\r\n}));\r\n\r\nconst Scrumboard = (props: any) => {\r\n    const classes = useStyle();\r\n    const history = useHistory();\r\n    let projectId = props.match.params.projectId;\r\n    const boards: DynamicBoard = useSelector((state: AppState) => state.boards);\r\n    const board = boards[projectId] || null;\r\n    const [members, setMembers] = React.useState<string[]>([]);\r\n\r\n    const { dispatch, currentUser } = useSharedContext();\r\n    console.log(\"scrumboard rerender\")\r\n    useEffect(() => {\r\n        const fetchBoard = async () => {\r\n            try{\r\n                const {data} = await axios.get(`/aspects/${projectId}`);\r\n                if(data.success) {\r\n                    dispatch(newBoard(data.data));\r\n                    let projectMembers: string[] = data.data[projectId].project.members.map((item: UserModel) => {\r\n                        return currentUser._id != item._id ? item._id : ''\r\n                    });\r\n                    setMembers(projectMembers);\r\n                }\r\n            }\r\n            catch(err){\r\n                console.error(err);\r\n            }\r\n        };\r\n\r\n        if(!boards.hasOwnProperty(projectId)){\r\n            fetchBoard();\r\n        }\r\n        else{\r\n            let projectMembers: string[] = boards[projectId].project.members.map((item: UserModel) => {\r\n                return currentUser._id != item._id ? (item._id || '') : ''\r\n            });\r\n            setMembers(projectMembers);\r\n        }\r\n    }, []);\r\n\r\n    const goBack = () => {\r\n        history.goBack();\r\n    }\r\n\r\n    const handleDragEnd = ({ destination, source }: DropResult) => {\r\n        if (!destination) {\r\n            return\r\n        }\r\n\r\n        if (destination.index === source.index && destination.droppableId === source.droppableId) {\r\n            return\r\n        }\r\n    }\r\n\r\n    if(!board) return null;\r\n\r\n    return (\r\n        <Box display=\"flex\" flexDirection=\"column\" className={classes.root}>\r\n            <Box className={clsx('bg-white', classes.header)} display=\"flex\"\r\n                flexDirection=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Typography variant=\"h5\" className=\"bg-text-primary fw-700\">\r\n                   {board?.project.title}\r\n                </Typography>\r\n                <Box>\r\n                    <RoundedButton variant=\"outlined\" className={clsx(classes.iconColor, classes.mr)} size=\"medium\"\r\n                        onClick={goBack}>\r\n                        <AppsOutlined className={classes.mr}></AppsOutlined>\r\n                        <span>Boards</span>\r\n                    </RoundedButton>\r\n                    <EditProjectDialog project = {board?.project} />\r\n                </Box>\r\n            </Box>\r\n\r\n            {/* Cards */}\r\n            <Box p={2} display=\"flex\" flexDirection=\"row\" overflow=\"auto\" height=\"100%\">\r\n                <DragDropContext onDragEnd={handleDragEnd} >\r\n                    {\r\n                        board?.aspects.map((item: any) => (\r\n                            <Droppable droppableId={item._id} key={item._id}>\r\n                                {\r\n                                    (provided: DroppableProvided) => (\r\n                                        <div className = {classes.aspect}\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.droppableProps}>\r\n\r\n                                            <Aspect aspect = {item} members={members} />\r\n                                            {provided.placeholder}\r\n\r\n                                            <NewSprintContainer aspect = {item} members={members} />\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </Droppable>\r\n                        ))\r\n                    }\r\n                </DragDropContext>\r\n                {/* New Aspect */}\r\n                <div className = {classes.aspect}>\r\n                 <NewAspectContainer projectId = {projectId} members = {members} />\r\n                </div>\r\n            </Box>\r\n\r\n        </Box>\r\n    )\r\n};\r\n\r\nconst EditProjectDialog = ({project}: {project: ProjectModel}) => {\r\n    const { onSidenavClose, onSidenavOpen, SidenavComponent } = useSidenav('right', 'persistent');\r\n    const { currentUser, owner } = useSharedContext();\r\n    const classes = useStyle();\r\n    let isDisabled = !(currentUser._id == owner);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <RoundedButton onClick={onSidenavOpen} disabled={isDisabled}\r\n             disableElevation variant=\"contained\" color=\"primary\" size=\"medium\">\r\n                <EditOutlined className={classes.mr}></EditOutlined>\r\n                <span>Edit Board</span>\r\n            </RoundedButton>\r\n\r\n            <SidenavComponent>\r\n                <div style={{ overflowY: 'auto', height: 'calc(100% - 56px)', marginTop: '56px', }}>\r\n                    <EditProject onSidenavClose={onSidenavClose} project = {project} />\r\n                </div>\r\n            </SidenavComponent>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default Scrumboard;\r\n"],"sourceRoot":""}