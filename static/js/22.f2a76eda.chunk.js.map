{"version":3,"sources":["pages/auth/ForgotPassword/index.tsx"],"names":["schema","yup","shape","email","required","initialValue","ForgotPasswordForm","initialValues","validationSchema","onSubmit","values","console","log","handleSubmit","handleChange","handleBlur","errors","touched","autoComplete","className","placeholder","variant","size","onChange","onBlur","name","value","error","helperText","type","color","to","ForgotPassword","theme","useTheme","matches","useMediaQuery","breakpoints","up","gridBasicStyle","minHeight","height","container","item","xs","style","padding","width","pr","sm","md","display","flexDirection","justifyContent","alignItems","src","logo","alt","gutterBottom","mt"],"mappings":"8PAkBMA,EAASC,MAAaC,MAAM,CAC9BC,MAAOF,MAAaG,SAAS,qBAAqBD,MAAM,mBAGtDE,EAAe,CAAEF,MAAO,IA8BxBG,EAAqB,WAEvB,OACI,cAAC,IAAD,CAAQC,cAAeF,EAAcG,iBAAkBR,EAAQS,SAAU,SAACC,GAAD,OAAYC,QAAQC,IAAIF,IAAjG,SAEQ,gBAAGG,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,WAAYC,EAA3C,EAA2CA,OAAQN,EAAnD,EAAmDA,OAAQO,EAA3D,EAA2DA,QAA3D,OACI,eAAC,IAAD,CAAMR,SAAUI,EAAcK,aAAa,MAA3C,UACI,sBAAKC,UAAU,aAAf,UACI,uBAAOA,UAAU,oBAAjB,6BACA,cAAC,IAAD,CACIA,UAAU,QACVC,YAAY,mBACZC,QAAQ,WACRC,KAAK,QACLC,SAAUT,EACVU,OAAQT,EACRU,KAAK,QACLC,MAAOhB,EAAOP,MACdwB,MAASV,EAAQd,SAAWa,EAAOb,MACnCyB,WAAcX,EAAQd,OAASa,EAAOb,WAE9C,uBACA,cAAC,IAAD,CAAK0B,KAAK,SAASV,UAAU,QAAQE,QAAQ,WAAWS,MAAM,UAA9D,6BAGA,uBAnBJ,IAmBW,uBACP,eAAC,IAAD,CAAYT,QAAQ,YAApB,uBACc,cAAC,IAAD,CAAMU,GAAG,SAAT,+BASvBC,UAhEQ,WACnB,IAAMC,EAAQC,cACRC,EAAUC,YAAcH,EAAMI,YAAYC,GAAG,OAC7CC,EAAiB,CAAGC,UAAW,QAASC,OAAQ,QAEtD,OACI,eAAC,IAAD,CAAMC,WAAS,EAAf,UACI,cAAC,IAAD,CAAMC,MAAI,EAACC,IAAE,EAACC,MAAOV,EAAO,aAAKW,QAAS,QAAWP,GAAzB,aAA6CO,QAAS,UAAaP,GAA/F,SACI,eAAC,IAAD,CAAKQ,MAAM,OAAOC,GAAI,CAAEJ,GAAI,EAAGK,GAAI,EAAGC,GAAI,GAAKT,OAAO,OAAOU,QAAQ,OAAOC,cAAc,SAASC,eAAe,SAASC,WAAW,aAAtI,UACI,qBAAKC,IAAKC,IAAMC,IAAI,aADxB,IACsC,uBAClC,cAAC,IAAD,CAAYpC,QAAQ,KAAKF,UAAU,yBAAyBuC,cAAY,EAAxE,8BAGA,cAAC,IAAD,CAAYrC,QAAQ,YAAYqC,cAAY,EAA5C,qDAGA,cAAC,IAAD,CAAKC,GAAI,EAAGZ,MAAM,OAAlB,SACI,cAACzC,EAAD,WAIX6B,GAAW,cAAC,IAAD,CAAMQ,MAAI,EAACC,GAAI,EAAf,SACR,cAAC,IAAD","file":"static/js/22.f2a76eda.chunk.js","sourcesContent":["import React from 'react';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport {\r\n    Grid,\r\n    Box,\r\n    Typography,\r\n    Fab\r\n} from '@material-ui/core';\r\n\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport Welcome from '../../../components/Welcome';\r\nimport logo from '../../../assets/logo48.png';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport * as yup from 'yup';\r\nimport MyTextField from '../../../components/MyTextField';\r\n\r\n\r\nconst schema = yup.object().shape({\r\n    email: yup.string().required('Email is required').email('Invalid Email')\r\n});\r\n\r\nconst initialValue = { email: '' };\r\n\r\nconst ForgotPassword = () => {\r\n    const theme = useTheme();\r\n    const matches = useMediaQuery(theme.breakpoints.up('sm'));\r\n    const gridBasicStyle = {  minHeight: '100vh', height: '100%'}\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs style={matches ? { padding: '3rem', ...gridBasicStyle} : { padding: '1.5rem', ...gridBasicStyle}}>\r\n                <Box width=\"100%\" pr={{ xs: 0, sm: 3, md: 5 }} height=\"100%\" display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"flex-start\">\r\n                    <img src={logo} alt=\"app logo\" /> <br />\r\n                    <Typography variant=\"h4\" className=\"fw-700 bg-text-primary\" gutterBottom>\r\n                         Forgot password?\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                       Fill in the form to reset your password\r\n                    </Typography>\r\n                    <Box mt={1} width=\"100%\">\r\n                        <ForgotPasswordForm />\r\n                    </Box>\r\n                </Box>\r\n            </Grid>\r\n            {matches && <Grid item xs={6}>\r\n                <Welcome />\r\n            </Grid>}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst ForgotPasswordForm = () => {\r\n\r\n    return (\r\n        <Formik initialValues={initialValue} validationSchema={schema} onSubmit={(values) => console.log(values)}>\r\n            {\r\n                ({ handleSubmit, handleChange, handleBlur, errors, values, touched }) => (\r\n                    <Form onSubmit={handleSubmit} autoComplete=\"off\">\r\n                        <div className=\"form-group\">\r\n                            <label className=\"bg-text-secondary\">Email Address *</label>\r\n                            <MyTextField\r\n                                className=\"w-100\"\r\n                                placeholder=\"Enter your email\"\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                name=\"email\"\r\n                                value={values.email}\r\n                                error = {touched.email && !!errors.email} \r\n                                helperText = {touched.email && errors.email} />\r\n                        </div>\r\n                        <br />\r\n                        <Fab type=\"submit\" className=\"w-100\" variant=\"extended\" color=\"primary\">\r\n                         Send reset link\r\n                        </Fab>\r\n                        <br /> <br /> \r\n                        <Typography variant=\"subtitle2\">\r\n                            Return to <Link to=\"/login\">sign in</Link>\r\n                        </Typography>\r\n                    </Form>\r\n                )\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default ForgotPassword;\r\n"],"sourceRoot":""}